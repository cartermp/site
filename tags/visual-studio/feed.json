{"version":"https://jsonfeed.org/version/1.1","title":"Visual Studio on Phillip Carter's blog","description":"Usually writing about F#","home_page_url":"https://phillipcarter.dev","feed_url":"https://phillipcarter.dev/tags/visual-studio/feed.json","authors":[{"name":"Phillip Carter"}],"items":[{"title":"How to make an F# code fixer","date_published":"2020-12-04T00:00:00Z","date_modified":"2021-02-28T16:22:54-08:00","id":"https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/","url":"https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/","content_html":"\u003cp\u003eNote: this post does not apply to Jetbrains Rider. Rider uses its own engine for representing F# syntax expressions and has its own strongly-typed API for traversing and manipulating F# expressions.\u003c/p\u003e\n\u003cp\u003eF# tooling in Visual Studio and Visual Studio Code supports a variety quick fixes for fixing an error in your code. Here\u0026rsquo;s an example of one:\u003c/p\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex justify-center\"\u003e\n\u003cfigure class=\"gblog-post__figure\"\u003e\n    \u003ca class=\"gblog-post__link--raw\" href=\"/posts/how-to-make-an-fsharp-code-fixer/images/wrap-expression-in-parentheses.png\"\u003e\n        \u003cimg\n            loading=\"lazy\"\n            \n            src=\"/posts/how-to-make-an-fsharp-code-fixer/images/wrap-expression-in-parentheses_hu8e09b360e18351fba4f756a57821447e_57981_600x0_resize_box_2.png\" alt=\"Wrap Expression in Parentheses Quick Fix\"\n            /\u003e\n    \u003c/a\u003e\n    \n    \u003cfigcaption\u003eWrap Expression in Parentheses Quick Fix\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003ePretty neat, right? This post will walk through the essentials of implementing a quick fix like this in either Visual Studio or VSCode.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"gblog-post__anchorwrap\"\u003e\n    \u003ch2 id=\"the-essential-pieces-of-an-editor-quick-fixer\"\u003e\n        The essential pieces of an editor Quick Fixer\n        \u003ca data-clipboard-text=\"https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#the-essential-pieces-of-an-editor-quick-fixer\" class=\"gblog-post__anchor gblog-post__anchor--right clip\" aria-label=\"Anchor The essential pieces of an editor Quick Fixer\" href=\"#the-essential-pieces-of-an-editor-quick-fixer\"\u003e\n            \u003csvg class=\"icon link\"\u003e\u003cuse xlink:href=\"#link\"\u003e\u003c/use\u003e\u003c/svg\u003e\n        \u003c/a\u003e\n    \u003c/h2\u003e\n\u003c/div\u003e\n\n\u003cp\u003eQuick Fixes are pretty straightforward. They are comprised of 3 things:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAn editing environment that can \u0026ldquo;listen\u0026rdquo; for specific diagnostics (tracked by ID) and allow you to plug into that engine\u003c/li\u003e\n\u003cli\u003eA \u0026ldquo;context\u0026rdquo; for a Quick Fix that crucially contains the span/range of text in a document corresponding to an error or warning\u003c/li\u003e\n\u003cli\u003eSome code that registers itself as a plugin for that diagnostic ID and/or message contents, and/or some other condition (more on that later)\u003c/li\u003e\n\u003cli\u003eSome code that performs logic that rewrites a small section of the user\u0026rsquo;s code to fix an issue\nAnd that\u0026rsquo;s it! The lifecycle is pretty simple, too:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePeriodically, an editing environment calls into the F# language service to process syntax and typecheck. This happens most often when you\u0026rsquo;re typing (after a very short delay to account for the typing). When it\u0026rsquo;s finished and there are syntax or typechecking errors, it raises appropriate diagnostics for the editing environment to report.\u003c/p\u003e\n\u003cp\u003eWhen this happens, any quick fix that is registered to \u0026ldquo;listen\u0026rdquo; to a particular diagnostic is made available to be triggered if and only if that diagnostic was raised. When the user does something like click a lightbulb in an editor or hit the right key command, all Quick Fixes that are available at that position are executed asynchronously, and the syntax transformation that they offer is also made available.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"gblog-post__anchorwrap\"\u003e\n    \u003ch2 id=\"each-editor-has-their-own-apis\"\u003e\n        Each editor has their own APIs\n        \u003ca data-clipboard-text=\"https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#each-editor-has-their-own-apis\" class=\"gblog-post__anchor gblog-post__anchor--right clip\" aria-label=\"Anchor Each editor has their own APIs\" href=\"#each-editor-has-their-own-apis\"\u003e\n            \u003csvg class=\"icon link\"\u003e\u003cuse xlink:href=\"#link\"\u003e\u003c/use\u003e\u003c/svg\u003e\n        \u003c/a\u003e\n    \u003c/h2\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFirst things first: you can\u0026rsquo;t just copy/paste a quick fix from Visual Studio into VSCode or vice/versa. Although a quick fix can share the same logic across editors, it must ultimately bind to the particular editor API that hosts it.\u003c/p\u003e\n\u003cp\u003eIn the case of Visual Studio tooling for F#, the skeleton that wraps any custom logic generally looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eVisualStudio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEditor\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Composition\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Threading\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Threading.Tasks\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.Text\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.CodeFixes\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.CodeActions\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eExportCodeFixProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharpConstants\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFSharpLanguageName\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;NAME HERE\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eShared\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"nc\"\u003einternal\u003c/span\u003e \u003cspan class=\"n\"\u003eFSharpYourQuickFixNameHereFixProvider\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"k\"\u003einherit\u003c/span\u003e \u003cspan class=\"n\"\u003eCodeFixProvider\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Any applicable diagnostic IDs go here\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;FSXYZ\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e \u003cspan class=\"n\"\u003efixableDiagnosticIds\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRegisterCodeFixesAsync\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTask\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n        \u003cspan class=\"n\"\u003easync\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Title comes from a resource file\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSR\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWrapExpressionInParentheses\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// Custom logic can be written or called here\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eapplicableIDs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDiagnostics\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFixableDiagnosticIds\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eContains\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eId\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRegisterCodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n                \u003cspan class=\"nn\"\u003eCodeAction\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003easync\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003esourceText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetTextAsync\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eAsync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAwaitTask\u003c/span\u003e\n                            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWithText\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"c\"\u003e(* TODO - code that changes text *)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStartAsyncAsTask\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)),\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eapplicableIDs\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStartAsyncUnitAsTask\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt may seem like there\u0026rsquo;s a lot going on here, but most of it is just glue code to ensure that everything is asynchronous and cancellable and runs in the Roslyn workspace host inside of Visual Studio. They key pieces are there:\u003c/p\u003e\n\u003cp\u003eConfiguring a set of applicable diagnostics for the code fix\nCode that registers a quick fix for the applicable diagnostics (asynchronous and cancellable)\nSpots in the code to enter in custom logic and logic for manipulating user code\nIn VSCode (technically FsAutocomplete), a quick fix skeleton might look similar to this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eyourCustomeCodeFix\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egetFileLines\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"bp\"\u003e[]\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u0026gt;):\u003c/span\u003e \u003cspan class=\"n\"\u003eCodeFix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eifDiagnosticByCode\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostic\u003c/span\u003e \u003cspan class=\"n\"\u003ecodeActionParams\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ematch\u003c/span\u003e \u003cspan class=\"n\"\u003egetFileLines\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeActionParams\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTextDocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetFilePath\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eOk\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eerroringExpression\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetText\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostic\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRange\u003c/span\u003e\n                \u003cspan class=\"n\"\u003easync\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReturn\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eTitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;your title here\u0026#34;\u003c/span\u003e\n                                 \u003cspan class=\"n\"\u003eFile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecodeActionParams\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTextDocument\u003c/span\u003e\n                                 \u003cspan class=\"n\"\u003eSourceDiagnostic\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSome\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostic\u003c/span\u003e\n                                 \u003cspan class=\"n\"\u003eEdits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                                    \u003cspan class=\"o\"\u003e[|\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostic\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRange\u003c/span\u003e\n                                         \u003cspan class=\"n\"\u003eNewText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"c\"\u003e(* TODO - define new text *)\u003c/span\u003e \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e|]\u003c/span\u003e\n                                 \u003cspan class=\"n\"\u003eKind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFix\u003c/span\u003e \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eError\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003easync\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReturn\u003c/span\u003e \u003cspan class=\"bp\"\u003e[]\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nn\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eofList\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;DIAGNOSTIC-IDS-HERE\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e])\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDue to some nice helper functionality it\u0026rsquo;s less code, but the basic pieces are all the same.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"gblog-post__anchorwrap\"\u003e\n    \u003ch2 id=\"easy-quick-fixer-example-just-manipulating-text\"\u003e\n        Easy quick fixer example: just manipulating text\n        \u003ca data-clipboard-text=\"https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#easy-quick-fixer-example-just-manipulating-text\" class=\"gblog-post__anchor gblog-post__anchor--right clip\" aria-label=\"Anchor Easy quick fixer example: just manipulating text\" href=\"#easy-quick-fixer-example-just-manipulating-text\"\u003e\n            \u003csvg class=\"icon link\"\u003e\u003cuse xlink:href=\"#link\"\u003e\u003c/use\u003e\u003c/svg\u003e\n        \u003c/a\u003e\n    \u003c/h2\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSometimes, a quick fix can be trivial to implement because all you need to do is change an obviously incorrect span of text in a user\u0026rsquo;s source code. The following example comes from a very common error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erng\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRandom\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emakeBigger\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003emakeBigger\u003c/span\u003e \u003cspan class=\"n\"\u003erng\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis code seems like it might be right, but the compiler complains because it thinks that the \u003ccode\u003e(5)\u003c/code\u003e is another argument being passed to \u003ccode\u003emakeBigger\u003c/code\u003e. It\u0026rsquo;s a \u0026ldquo;classic\u0026rdquo; F# compiler error that is usually resolved by adding parentheses. So, why not make a Code Fix that adds the parentheses? As it turns out, that is trivial.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s how it is done in Visual Studio:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eVisualStudio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEditor\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Composition\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Threading\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Threading.Tasks\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.Text\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.CodeFixes\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.CodeActions\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eExportCodeFixProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharpConstants\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFSharpLanguageName\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;AddParentheses\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eShared\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"nc\"\u003einternal\u003c/span\u003e \u003cspan class=\"n\"\u003eFSharpWrapExpressionInParenthesesFixProvider\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"k\"\u003einherit\u003c/span\u003e \u003cspan class=\"n\"\u003eCodeFixProvider\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// FS0597 is the ID for the diagnostic that gets triggered\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;FS0597\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e \u003cspan class=\"n\"\u003efixableDiagnosticIds\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRegisterCodeFixesAsync\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTask\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n        \u003cspan class=\"n\"\u003easync\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Title comes from a resource file\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSR\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWrapExpressionInParentheses\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eapplicableIDs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDiagnostics\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFixableDiagnosticIds\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eContains\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eId\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// This will wrap a range of text in parentheses\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003egetChangedText\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWithChanges\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextChange\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;(\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n                          \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWithChanges\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextChange\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEnd\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRegisterCodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n                \u003cspan class=\"nn\"\u003eCodeAction\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003easync\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003esourceText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetTextAsync\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eAsync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAwaitTask\u003c/span\u003e\n                            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWithText\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egetChangedText\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStartAsyncAsTask\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)),\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003eapplicableIDs\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStartAsyncUnitAsTask\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBecause the diagnostic itself has a range that encapsulates the entire troublesome expression, all we need to do is wrap parentheses around that range in a document.\u003c/p\u003e\n\u003cp\u003eThe same quick fix in VSCode looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"sd\"\u003e/// a codefix that parenthesizes a member expression that needs it\n\u003c/span\u003e\u003cspan class=\"sd\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eparenthesizeExpression\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egetFileLines\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"bp\"\u003e[]\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u0026gt;):\u003c/span\u003e \u003cspan class=\"n\"\u003eCodeFix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eifDiagnosticByCode\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostic\u003c/span\u003e \u003cspan class=\"n\"\u003ecodeActionParams\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ematch\u003c/span\u003e \u003cspan class=\"n\"\u003egetFileLines\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeActionParams\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTextDocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetFilePath\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eOk\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eerroringExpression\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetText\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostic\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRange\u003c/span\u003e\n          \u003cspan class=\"n\"\u003easync\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReturn\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eTitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Wrap expression in parentheses\u0026#34;\u003c/span\u003e\n                           \u003cspan class=\"n\"\u003eFile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecodeActionParams\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTextDocument\u003c/span\u003e\n                           \u003cspan class=\"n\"\u003eSourceDiagnostic\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSome\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostic\u003c/span\u003e\n                           \u003cspan class=\"n\"\u003eEdits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                               \u003cspan class=\"o\"\u003e[|\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostic\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRange\u003c/span\u003e\n                                    \u003cspan class=\"c1\"\u003e// Using a string interpolation to supply new text\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e                                    \u003cspan class=\"n\"\u003eNewText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;(%s{erroringExpression})\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e|]\u003c/span\u003e\n                                    \u003cspan class=\"n\"\u003eKind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFix\u003c/span\u003e \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eError\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003easync\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReturn\u003c/span\u003e \u003cspan class=\"bp\"\u003e[]\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nn\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eofList\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;597\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e])\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis kind of easy quick fix can be written becase we have all the information we need right there. However, not every quick fix can be written so easily.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"gblog-post__anchorwrap\"\u003e\n    \u003ch2 id=\"harder-quick-fixer-example-scanning-the-text-in-a-document\"\u003e\n        Harder quick fixer example: scanning the text in a document\n        \u003ca data-clipboard-text=\"https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#harder-quick-fixer-example-scanning-the-text-in-a-document\" class=\"gblog-post__anchor gblog-post__anchor--right clip\" aria-label=\"Anchor Harder quick fixer example: scanning the text in a document\" href=\"#harder-quick-fixer-example-scanning-the-text-in-a-document\"\u003e\n            \u003csvg class=\"icon link\"\u003e\u003cuse xlink:href=\"#link\"\u003e\u003c/use\u003e\u003c/svg\u003e\n        \u003c/a\u003e\n    \u003c/h2\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSometimes the error range for a diagnostic isn\u0026rsquo;t enough information to inform a quick fix. But not all is lost! Sometimes all you have to do is scan through a document until you find something that gives you the information you need.\u003c/p\u003e\n\u003cp\u003eConsider the following error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEntryPoint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emain\u003c/span\u003e \u003cspan class=\"n\"\u003eargv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// \u0026#39;argv -1\u0026#39; is an error\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// The range of the error, however, is only \u0026#39;argv\u0026#39;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e0\u003c/span\u003e \u003cspan class=\"k\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eargv\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintfn\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;uuuhhhhh\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe compiler will complain because it things you\u0026rsquo;re calling argv as a function and passing \u003ccode\u003e-1\u003c/code\u003e to it. This can happen because \u003ccode\u003e-\u003c/code\u003e is both a binary and a unary operator, and the F# parser parses \u003ccode\u003e-1\u003c/code\u003e as a negation on 1, and the entire text of \u003ccode\u003e-1\u003c/code\u003e as a value being passed to argv. Since argv is not a function, this is obviously not correct.\u003c/p\u003e\n\u003cp\u003eBecause the compiler error\u0026rsquo;s range corresponds to argv, we don\u0026rsquo;t actually have enough information to know that we can place a space between the \u003ccode\u003e-\u003c/code\u003e and the \u003ccode\u003e1\u003c/code\u003e. In fact, based on the error range being only for argv, we don\u0026rsquo;t even know where in source the \u003ccode\u003e-1\u003c/code\u003e is! So we\u0026rsquo;ll not only need to find its location, but also ensure that the next construct that comes after argv is indeed a \u003ccode\u003e-\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLuckily, this can be done as a recursive function or loop. Here\u0026rsquo;s an example of scanning forward past the span corresponding to the diagnostic using Visual Studio APIs:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEnd\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enextNonWhitespaceText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erec\u003c/span\u003e \u003cspan class=\"n\"\u003eloop\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nn\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsNullOrWhiteSpace\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n            \u003cspan class=\"n\"\u003estr\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eloop\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetSubText\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)))\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eloop\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetSubText\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)))\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will grab a span of text that\u0026rsquo;s exactly one character long, check it, and keep going until it\u0026rsquo;s not whitespace. We can then check that nextNonWhitespaceText is equal to \u003ccode\u003e-\u003c/code\u003e. If it is, we can trigger a code fix! Here\u0026rsquo;s how the entire code fixer can look:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eVisualStudio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEditor\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Composition\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Threading.Tasks\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.Text\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.CodeFixes\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eExportCodeFixProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharpConstants\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFSharpLanguageName\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;ChangePrefixNegationToInfixSubtraction\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eShared\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"nc\"\u003einternal\u003c/span\u003e \u003cspan class=\"n\"\u003eFSharpChangePrefixNegationToInfixSubtractionodeFixProvider\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"k\"\u003einherit\u003c/span\u003e \u003cspan class=\"n\"\u003eCodeFixProvider\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;FS0003\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e \u003cspan class=\"n\"\u003efixableDiagnosticIds\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRegisterCodeFixesAsync\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTask\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n        \u003cspan class=\"n\"\u003easyncMaybe\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ediagnostics\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDiagnostics\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eId\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003esourceText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetTextAsync\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// End of \u0026#39;argv\u0026#39;, in the case of the example above\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEnd\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// This won\u0026#39;t ever actually happen, but it\u0026#39;s good to check\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003edo\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"nn\"\u003eOption\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eguard\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enextNonWhitespaceText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erec\u003c/span\u003e \u003cspan class=\"n\"\u003eloop\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nn\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsNullOrWhiteSpace\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003estr\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003eloop\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetSubText\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)))\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eloop\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetSubText\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)))\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// Bail if this isn\u0026#39;t a negation\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003edo\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"nn\"\u003eOption\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eguard\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enextNonWhitespaceText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSR\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eChangePrefixNegationToInfixSubtraction\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecodeFix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"nn\"\u003eCodeFixHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateTextChangeCodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003easyncMaybe\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReturn\u003c/span\u003e \u003cspan class=\"o\"\u003e[|\u003c/span\u003e \u003cspan class=\"n\"\u003eTextChange\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;- \u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|]))\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRegisterCodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostics\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eAsync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIgnore\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStartAsyncUnitAsTask\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote that the API calls are slightly different here. There is a helper defined called \u003ccode\u003ecreateTextChangeCodeFix\u003c/code\u003e that can be used, unlike in the previous example.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"gblog-post__anchorwrap\"\u003e\n    \u003ch2 id=\"harder-quick-fixe-example-checking-the-syntax-tree\"\u003e\n        Harder quick fixe example: checking the syntax tree\n        \u003ca data-clipboard-text=\"https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#harder-quick-fixe-example-checking-the-syntax-tree\" class=\"gblog-post__anchor gblog-post__anchor--right clip\" aria-label=\"Anchor Harder quick fixe example: checking the syntax tree\" href=\"#harder-quick-fixe-example-checking-the-syntax-tree\"\u003e\n            \u003csvg class=\"icon link\"\u003e\u003cuse xlink:href=\"#link\"\u003e\u003c/use\u003e\u003c/svg\u003e\n        \u003c/a\u003e\n    \u003c/h2\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow things get a little more challenging. In the previous two examples, we could either work directly with a span of text in a document and change it, or scan the document to find what we need. But what if that\u0026rsquo;s not enough? In some cases, you need to answer a more complicated question that corresponds to the actual struture of F# source code. Consider the following incorrect code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSomeone without much F# (or OCaml) experience might thing that this is a boolean \u003ccode\u003enot\u003c/code\u003e operation. However, it is not! The \u003ccode\u003e!\u003c/code\u003e operator is used to dereference a \u003ca class=\"gblog-post__link\" href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/reference-cells\"\u003eReference Cell\u003c/a\u003e\n. A correct fix would be to use the \u003ccode\u003enot\u003c/code\u003e operator:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe diagnostic triggers on both \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e but it does not contain the text or position of !. Although it\u0026rsquo;s possible to scan in a document to find the \u003ccode\u003e!\u003c/code\u003e, there\u0026rsquo;s actually a much better approach: using the F# syntax tree APIs. Instead of relying on potentially error-prone custom scanning code, checking if a span of text is contained in a deference call (using \u003ccode\u003e!\u003c/code\u003e) will always be correct.\u003c/p\u003e\n\u003cp\u003eThis can be trivially accomplished with a type extension on \u003ccode\u003eFSharpParseFileResults\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler.Text\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler.Range\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler.SourceCodeServices\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAutoOpen\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eParseTreeExtensions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"nc\"\u003eFSharpParseFileResults\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n        \u003cspan class=\"k\"\u003emember\u003c/span\u003e \u003cspan class=\"n\"\u003escope\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eTryRangeOfRefCellDereferenceContainingPos\u003c/span\u003e \u003cspan class=\"n\"\u003eexpressionPos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ematch\u003c/span\u003e \u003cspan class=\"n\"\u003escope\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eParseTree\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eSome\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                \u003cspan class=\"nn\"\u003eAstTraversal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTraverse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpressionPos\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nn\"\u003eAstTraversal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAstVisitorBase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;_\u0026gt;\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003emember\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eVisitExpr\u003c/span\u003e\u003cspan class=\"o\"\u003e(_,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"n\"\u003edefaultTraverse\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003ematch\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"nn\"\u003eSynExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eApp\u003c/span\u003e\u003cspan class=\"o\"\u003e(_,\u003c/span\u003e \u003cspan class=\"k\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nn\"\u003eSynExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIdent\u003c/span\u003e \u003cspan class=\"n\"\u003efuncIdent\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e_)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003efuncIdent\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eidText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;op_Dereference\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003erangeContainsPos\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRange\u003c/span\u003e \u003cspan class=\"n\"\u003eexpressionPos\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003eSome\u003c/span\u003e \u003cspan class=\"n\"\u003efuncIdent\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eidRange\u003c/span\u003e\n                            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003eNone\u003c/span\u003e\n                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edefaultTraverse\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e \u003cspan class=\"o\"\u003e})\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eNone\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eNone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe F# compiler services contain, among other things, a syntax tree visitor that has some default behavior you can override. You still need to implement \u003ccode\u003eVisitExpr\u003c/code\u003e, which is the exact one we\u0026rsquo;re going to work with here.\u003c/p\u003e\n\u003cp\u003eIf it looks complicated, don\u0026rsquo;t worry! It\u0026rsquo;s really not too bad. There is just a bit of terminology to understand:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;Range\u0026rdquo; and \u0026ldquo;Pos\u0026rdquo;, such as in the \u003ccode\u003erangeContainsPos\u003c/code\u003e call, refer to a range of text in a document (a line/column pair) and a position (a line and a column)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSynExpr.App\u003c/code\u003e refers to a function application. All function applications contain a function expression and a argument expression of type \u003ccode\u003eSynExpr\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSynExpr.Ident\u003c/code\u003e refers to an identifer in a syntax tree. It has a name (\u003ccode\u003eidText\u003c/code\u003e) and a range (\u003ccode\u003eidRange\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn this case, the expression \u003ccode\u003e!x\u003c/code\u003e (or any of variant including arbitrary nesting of parentheses or whitespace) is just a \u003ccode\u003eSynExpr.App\u003c/code\u003e where the function expression is a \u003ccode\u003eSynExpr.Ident\u003c/code\u003e with \u003ccode\u003eidText\u003c/code\u003e of \u003ccode\u003eop_Dereference\u003c/code\u003e. So we just need to check that a given position is contained in the range of the argument that is being applied to \u003ccode\u003e!\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo, how do we call this? That\u0026rsquo;s where a given editor API comes into play. In the case of Visual Studio, we need to convert from a Roslyn-based span of text to an F# compiler-based range of text (note the difference in terminology). Even though they both refer to the same thing, they have slightly different ways of representing the data.\u003c/p\u003e\n\u003cp\u003eWe also need to parse a document to get access to an instance of \u003ccode\u003eFSharpParseFileResults\u003c/code\u003e. So if we refer back to the skeleton source code, the custom logic here is:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eParse a document\u003c/li\u003e\n\u003cli\u003eConvert the code fix context\u0026rsquo;s span of text into an F# range\u003c/li\u003e\n\u003cli\u003eCall our extension to \u003ccode\u003eFSharpParseFileResults\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eApply a code fix to the \u003ccode\u003e!\u003c/code\u003e if it exists\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHere\u0026rsquo;s the full code snippet of the fixer:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eVisualStudio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEditor\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Composition\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Threading.Tasks\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.Text\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.CodeFixes\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eExportCodeFixProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharpConstants\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFSharpLanguageName\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;ChangeRefCellDerefToNotExpression\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eShared\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"nc\"\u003einternal\u003c/span\u003e \u003cspan class=\"n\"\u003eFSharpChangeRefCellDerefToNotExpressionCodeFixProvider\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eImportingConstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"n\"\u003echeckerProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eFSharpCheckerProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprojectInfoManager\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eFSharpProjectOptionsManager\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"k\"\u003einherit\u003c/span\u003e \u003cspan class=\"n\"\u003eCodeFixProvider\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003euserOpName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;FSharpChangeRefCellDerefToNotExpressionCodeFix\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;FS0001\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003e__\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e \u003cspan class=\"n\"\u003efixableDiagnosticIds\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRegisterCodeFixesAsync\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTask\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n        \u003cspan class=\"n\"\u003easyncMaybe\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// All of this is setup to be able to parse a document\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edocument\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003eparsingOptions\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprojectInfoManager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryGetOptionsForEditingDocumentOrProject\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003euserOpName\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003esourceText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetTextAsync\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// The actual parsing call, which is slightly complex\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003eparseResults\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echeckerProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eChecker\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eParseFile\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilePath\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eToFSharpSourceText\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eparsingOptions\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003euserOpName\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eliftAsync\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// Converting to an F# range\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eerrorRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTextSpanToFSharpRange\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilePath\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// Getting a range of a dereference operator\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003ederefRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparseResults\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryRangeOfRefCellDereferenceContainingPos\u003c/span\u003e \u003cspan class=\"n\"\u003eerrorRange\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\n\n            \u003cspan class=\"c1\"\u003e// Converting back into Roslyn-based spans\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003ederefSpan\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryFSharpRangeToTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ederefRange\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSR\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUseNotForNegation\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ediagnostics\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDiagnostics\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eId\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecodeFix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"nn\"\u003eCodeFixHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateTextChangeCodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                    \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\n                    \u003cspan class=\"c1\"\u003e// The actual fix is trivial, just place `!` with `not `\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e                    \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003easyncMaybe\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReturn\u003c/span\u003e \u003cspan class=\"o\"\u003e[|\u003c/span\u003e \u003cspan class=\"n\"\u003eTextChange\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ederefSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;not \u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|]))\u003c/span\u003e\n\n            \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRegisterCodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostics\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eAsync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIgnore\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStartAsyncUnitAsTask\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that\u0026rsquo;s it! There\u0026rsquo;s a bit of ceremony to get access to the data we need and to convert back and forth between different textual representations, but after that the actual code fix is trivial.\u003c/p\u003e\n\u003cp\u003eHarder quick fixer example: analyzing semantics\nFinally, you may also need to analyze F# semantics to be able to offer up a quick fix. Some errors that involve typechecking require you to analyze typecheck results to get the information that you\u0026rsquo;re after.\u003c/p\u003e\n\u003cp\u003eConsider the following code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e12\u003c/span\u003e\n\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003e13\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will fail to compile because we\u0026rsquo;re trying to mutate \u003ccode\u003ex\u003c/code\u003e, but it isn\u0026rsquo;t declared as \u003ccode\u003emutable\u003c/code\u003e. I personally run into this all the time because I won\u0026rsquo;t always know that I want to mutate something until I decide it\u0026rsquo;s necessary, then I have to go back and modify the declaration manually. Why not have a quick fixer do that?\u003c/p\u003e\n\u003cp\u003eTo make this quick fixer, we need to now also analyze semantics, because we need to find the declaration location of a given value. Specifically, we\u0026rsquo;ll need to do the following:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFind the F# symbol for \u003ccode\u003ex\u003c/code\u003e in the erroneous \u003ccode\u003ex \u0026lt;- 13\u003c/code\u003e call\u003c/li\u003e\n\u003cli\u003eFind the declaration of \u003ccode\u003ex\u003c/code\u003e once we\u0026rsquo;ve resolved it at its use\u003c/li\u003e\n\u003cli\u003eCheck that it\u0026rsquo;s not a parameter (if it is, we can\u0026rsquo;t declare it as \u003ccode\u003emutable\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eApply the \u003ccode\u003emutable\u003c/code\u003e keyword to the declaration of \u003ccode\u003ex\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThere\u0026rsquo;s more code involved here than before, much of which is just boilerplate needed to be able to get a declaration of a value. Unfortunately, this boilerplate is fairly complex, so I would not classify this kind of code fix as easy.\u003c/p\u003e\n\u003cp\u003eThis is what the boilerplate needed in Visual Studio to be able to get a declaration looks like, which I\u0026rsquo;ve annotated to the best of my ability:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"c1\"\u003e// Just setting up some values and doing a quick check\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edocument\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\n\u003cspan class=\"k\"\u003edo\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"nn\"\u003eOption\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eguard\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"ow\"\u003enot\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eisSignatureFile\u003c/span\u003e \u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilePath\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003echecker\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echeckerProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eChecker\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// This is critical. Use the START of the diagnostic span\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eposition\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Accessing the data that we need to make certain API calls\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003eparsingOptions\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprojectOptions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprojectInfoManager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryGetOptionsForEditingDocumentOrProject\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nn\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNone\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003euserOpName\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003esourceText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetTextAsync\u003c/span\u003e \u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eliftTaskAsync\u003c/span\u003e\n\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edefines\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eCompilerEnvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetCompilationDefinesForEditing\u003c/span\u003e \u003cspan class=\"n\"\u003eparsingOptions\u003c/span\u003e\n\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etextLine\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetLineFromPosition\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\n\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etextLinePos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetLinePosition\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\n\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efcsTextLineNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eLine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromZ\u003c/span\u003e \u003cspan class=\"n\"\u003etextLinePos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLine\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Parse and typecheck a document, getting results for the parsing and typechecking\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003eparseFileResults\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"n\"\u003echeckFileResults\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echecker\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eParseAndCheckDocument\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprojectOptions\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003euserOpName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003euserOpName\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Build a \u0026#34;lexer symbol\u0026#34; - this will quickly isolate the `x` from the rest of the expression and generate an F# SynExpr.Ident that can be used in other API calls\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003elexerSymbol\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eTokenizer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetSymbolAtPosition\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eId\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilePath\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edefines\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nn\"\u003eSymbolLookupKind\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGreedy\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Finally, get the declaration of the symbol that a position corresponds to\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edecl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echeckFileResults\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetDeclarationLocation\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efcsTextLineNumber\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elexerSymbol\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIdent\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eidRange\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEndColumn\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etextLine\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eToString\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elexerSymbol\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFullIsland\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eIt\u0026#39;s\u003c/span\u003e \u003cspan class=\"n\"\u003equite\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003elot\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003ewe\u0026#39;re\u003c/span\u003e \u003cspan class=\"n\"\u003eplanning\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003efinding\u003c/span\u003e \u003cspan class=\"n\"\u003eways\u003c/span\u003e \u003cspan class=\"k\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eimprove\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e \u003cspan class=\"n\"\u003ecompiler\u003c/span\u003e \u003cspan class=\"n\"\u003eservice\u003c/span\u003e \u003cspan class=\"n\"\u003eAPIs\u003c/span\u003e \u003cspan class=\"k\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003emake\u003c/span\u003e \u003cspan class=\"n\"\u003ethis\u003c/span\u003e \u003cspan class=\"n\"\u003ekind\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003eboilerplate\u003c/span\u003e \u003cspan class=\"n\"\u003eno\u003c/span\u003e \u003cspan class=\"n\"\u003elonger\u003c/span\u003e \u003cspan class=\"n\"\u003enecessary\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNext, we\u0026rsquo;ll also need to detect if the declaration is contained within a parameter or not. We\u0026rsquo;ll need to also have an \u003ccode\u003eFSharpParseFileResults\u003c/code\u003e extension like before:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler.Text\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler.Range\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler.SourceCodeServices\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAutoOpen\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eParseTreeExtensions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"nc\"\u003eFSharpParseFileResults\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n        \u003cspan class=\"k\"\u003emember\u003c/span\u003e \u003cspan class=\"n\"\u003escope\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eIsPositionContainedInACurriedParameter\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ematch\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eSome\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                    \u003cspan class=\"nn\"\u003eAstTraversal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTraverse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nn\"\u003eAstTraversal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAstVisitorBase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;_\u0026gt;\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \n                        \u003cspan class=\"k\"\u003emember\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eVisitExpr\u003c/span\u003e\u003cspan class=\"o\"\u003e(_\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etraverseSynExpr\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edefaultTraverse\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                            \u003cspan class=\"n\"\u003edefaultTraverse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n                        \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eVisitBinding\u003c/span\u003e \u003cspan class=\"o\"\u003e(_,\u003c/span\u003e \u003cspan class=\"n\"\u003ebinding\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                            \u003cspan class=\"k\"\u003ematch\u003c/span\u003e \u003cspan class=\"n\"\u003ebinding\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n                            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eBinding\u003c/span\u003e\u003cspan class=\"o\"\u003e(_,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"n\"\u003evalData\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e_)\u003c/span\u003e \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"n\"\u003erangeContainsPos\u003c/span\u003e \u003cspan class=\"n\"\u003erange\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003einfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalData\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSynValInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCurriedArgInfos\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emutable\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003efalse\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003egroup\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n                                    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003earg\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003egroup\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n                                        \u003cspan class=\"k\"\u003ematch\u003c/span\u003e \u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIdent\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n                                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eSome\u003c/span\u003e \u003cspan class=\"n\"\u003eident\u003c/span\u003e \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"n\"\u003erangeContainsPos\u003c/span\u003e \u003cspan class=\"n\"\u003eident\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eidRange\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                                            \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"k\"\u003etrue\u003c/span\u003e\n                                        \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n                                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e \u003cspan class=\"n\"\u003eSome\u003c/span\u003e \u003cspan class=\"n\"\u003erange\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003eNone\u003c/span\u003e\n                            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                                \u003cspan class=\"n\"\u003eNone\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e})\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsSome\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efalse\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this case, we just use \u003ccode\u003edefaultTraverse\u003c/code\u003e for any arbitary \u003ccode\u003eSynExpr\u003c/code\u003e, but we override the \u003ccode\u003eVisitBinding\u003c/code\u003e member. \u003ccode\u003eVisitBinding\u003c/code\u003e traverses a \u003ccode\u003eSynExpr.Binding\u003c/code\u003e, which is typicall a let binding. We need to then inspect data called \u003ccode\u003evalData\u003c/code\u003e, which contains a list of all curried parameter definitions for the binding, if they exist. We then loop through each and detect if the given position is within the range of one of the defined parameter bindings. For example, consider the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003e12\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Error\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis code will result in \u003ccode\u003ex\u003c/code\u003e being defined as a parameter. So we can pass the start position of its range to the tree traversal, which will then loop through each parameter until it finds the \u003ccode\u003ex\u003c/code\u003e definition. It will verify that the range of \u003ccode\u003ex\u003c/code\u003e contains the position we\u0026rsquo;re after, return true, and then we\u0026rsquo;ll know that \u003ccode\u003ex\u003c/code\u003e is defined as a parameter!\u003c/p\u003e\n\u003cp\u003ePutting it all together looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eVisualStudio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEditor\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Composition\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Threading\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Threading.Tasks\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.Text\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eMicrosoft.CodeAnalysis.CodeFixes\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler.Range\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler.SourceCodeServices\u003c/span\u003e\n\u003cspan class=\"k\"\u003eopen\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharp.Compiler.AbstractIL.Internal.Library\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eExportCodeFixProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nn\"\u003eFSharpConstants\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFSharpLanguageName\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;MakeDeclarationMutable\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eShared\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"nc\"\u003einternal\u003c/span\u003e \u003cspan class=\"n\"\u003eFSharpMakeDeclarationMutableFixProvider\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e[\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eImportingConstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;]\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"n\"\u003echeckerProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eFSharpCheckerProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \n        \u003cspan class=\"n\"\u003eprojectInfoManager\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eFSharpProjectOptionsManager\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"k\"\u003einherit\u003c/span\u003e \u003cspan class=\"n\"\u003eCodeFixProvider\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003euserOpName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;MakeDeclarationMutable\u0026#34;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;FS0027\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e \u003cspan class=\"n\"\u003efixableDiagnosticIds\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRegisterCodeFixesAsync\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTask\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n        \u003cspan class=\"n\"\u003easyncMaybe\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ediagnostics\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDiagnostics\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efixableDiagnosticIds\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eId\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoImmutableArray\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edocument\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\n            \u003cspan class=\"k\"\u003edo\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"nn\"\u003eOption\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eguard\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"ow\"\u003enot\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eisSignatureFile\u003c/span\u003e \u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilePath\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eposition\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003echecker\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echeckerProvider\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eChecker\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003eparsingOptions\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprojectOptions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprojectInfoManager\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryGetOptionsForEditingDocumentOrProject\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nn\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNone\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003euserOpName\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003esourceText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetTextAsync\u003c/span\u003e \u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eliftTaskAsync\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edefines\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eCompilerEnvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetCompilationDefinesForEditing\u003c/span\u003e \u003cspan class=\"n\"\u003eparsingOptions\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etextLine\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetLineFromPosition\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etextLinePos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetLinePosition\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efcsTextLineNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eLine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromZ\u003c/span\u003e \u003cspan class=\"n\"\u003etextLinePos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLine\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003eparseFileResults\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e_,\u003c/span\u003e \u003cspan class=\"n\"\u003echeckFileResults\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echecker\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eParseAndCheckDocument\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprojectOptions\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003euserOpName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003euserOpName\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003elexerSymbol\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eTokenizer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetSymbolAtPosition\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eId\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilePath\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edefines\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nn\"\u003eSymbolLookupKind\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGreedy\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edecl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echeckFileResults\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetDeclarationLocation\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efcsTextLineNumber\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elexerSymbol\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIdent\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eidRange\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEndColumn\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etextLine\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eToString\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elexerSymbol\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFullIsland\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n            \u003cspan class=\"k\"\u003ematch\u003c/span\u003e \u003cspan class=\"n\"\u003edecl\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Only do this for symbols in the same file. That covers almost all cases anyways.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// We really shouldn\u0026#39;t encourage making values mutable outside of local scopes anyways.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"nn\"\u003eFSharpFindDeclResult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDeclFound\u003c/span\u003e \u003cspan class=\"n\"\u003edeclRange\u003c/span\u003e \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"n\"\u003edeclRange\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFileName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFilePath\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003elet!\u003c/span\u003e \u003cspan class=\"nv\"\u003espan\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryFSharpRangeToTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esourceText\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edeclRange\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n                \u003cspan class=\"c1\"\u003e// Bail if it\u0026#39;s a parameter, because like, that ain\u0026#39;t allowed\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e                \u003cspan class=\"k\"\u003edo\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"nn\"\u003eOption\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eguard\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparseFileResults\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIsPositionContainedInACurriedParameter\u003c/span\u003e \u003cspan class=\"n\"\u003edeclRange\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\n                \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eSR\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMakeDeclarationMutable\u003c/span\u003e\u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n                \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecodeFix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                    \u003cspan class=\"nn\"\u003eCodeFixHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateTextChangeCodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                        \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                        \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efun\u003c/span\u003e \u003cspan class=\"bp\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003easyncMaybe\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReturn\u003c/span\u003e \u003cspan class=\"o\"\u003e[|\u003c/span\u003e \u003cspan class=\"n\"\u003eTextChange\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTextSpan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003espan\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStart\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;mutable \u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|]))\u003c/span\u003e\n\n                \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRegisterCodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecodeFix\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ediagnostics\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\n                \u003cspan class=\"bp\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eAsync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIgnore\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"nn\"\u003eRoslynHelpers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStartAsyncUnitAsTask\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCancellationToken\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that\u0026rsquo;s it!\u003c/p\u003e\n\n\n\n\u003cdiv class=\"gblog-post__anchorwrap\"\u003e\n    \u003ch2 id=\"contribute-your-own-code-fixer\"\u003e\n        Contribute your own code fixer\n        \u003ca data-clipboard-text=\"https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#contribute-your-own-code-fixer\" class=\"gblog-post__anchor gblog-post__anchor--right clip\" aria-label=\"Anchor Contribute your own code fixer\" href=\"#contribute-your-own-code-fixer\"\u003e\n            \u003csvg class=\"icon link\"\u003e\u003cuse xlink:href=\"#link\"\u003e\u003c/use\u003e\u003c/svg\u003e\n        \u003c/a\u003e\n    \u003c/h2\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIf you\u0026rsquo;ve made it this far, you should be armed to add all kinds of code fixers. There is actually another class of fixer that I can discuss in another blog post, where we pair a code analyzer that raises custom diagnostics with a fixer that acts on those diagnostics. But the contents of this post should be enough to add lots of different kinds of fixers.\u003c/p\u003e\n\u003cp\u003eIf you want to add one to Visual Studio, check out the fixers in the CodeFix folder. You can copy/paste one into a new file and change stuff as you go. Syntax tree extensions are typically moved into the F# compiler API itself, and with corresponding unit tests. But we can help you get that stuff added correctly during code review.\u003c/p\u003e\n\u003cp\u003eIf you want to add one to VSCode, check out the CodeFixes file and take a look at the variety of code fixers available there and add a new one. I advise looking through the git history of the file to see where various helpers, such as syntax tree extensions, are located.\u003c/p\u003e\n\u003cp\u003eHappy code fixing!\u003c/p\u003e\n"}]}