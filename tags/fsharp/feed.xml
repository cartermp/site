<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://gohugo.io/" version="0.81.0">Hugo</generator><title type="html">fsharp on Phillip Carter's blog</title><subtitle type="html">Usually writing about F#</subtitle><link href="https://phillipcarter.dev/tags/fsharp/" rel="alternate" type="text/html" title="HTML"/><link href="https://phillipcarter.dev/tags/fsharp/feed.xml" rel="self" type="application/atom+xml" title="Atom"/><link href="https://phillipcarter.dev/tags/fsharp/feed.json" rel="alternate" type="application/json" title="Json"/><updated>2021-03-01T02:34:20+00:00</updated><author><name>Phillip Carter</name><email>pcarter@fastmail.com</email></author><id>https://phillipcarter.dev/tags/fsharp/</id><entry><title type="html">The F# project-product duality</title><link href="https://phillipcarter.dev/posts/fsharp-project-product-duality/?utm_source=atom_feed" rel="alternate" type="text/html" hreflang="en"/><id>https://phillipcarter.dev/posts/fsharp-project-product-duality/</id><published>2020-12-30T00:00:00+00:00</published><updated>2021-02-28T16:22:54-08:00</updated><content type="html"><![CDATA[<p>The F# language is kind of wierd (in a good way). Born out of Microsoft Research and initially sold to the world by Microsoft as a part of Visual Studio, it now has a vibrant open source community and ecosystem around it. This puts it in a funny place. A great way to illustrate that is to visit the following links:</p>
<ul>
<li><a class="gblog-post__link" href="https://dotnet.microsoft.com/languages/fsharp">F# homepage on the Microsoft .NET site</a>
</li>
<li><a class="gblog-post__link" href="https://fsharp.org/">Homepage for F# and the F# Software Foundation</a>
</li>
</ul>
<p>The first link a page on the Microsoft marketing site for .NET. The other is 100% independent of Microsoft, run by the F# Software Foundation, and has been around longer than the marketing site (ironic, given that Microsoft&rsquo;s involvement with F# came well before the F# Software Foundation).</p>
<p>There are other ways you can see this duality play out:</p>
<ul>
<li>F# is delivered as a part of Visual Studio vs. F# can be built from source on most Linux distributions</li>
<li>F# can target the .NET Framework for Windows apps vs. <a class="gblog-post__link" href="https://fable.io/">F# can target the JavaScript runtime</a>
</li>
<li>F# users who primarily use it for OSS vs. those who primarily use it for work (such as at a financial institution)</li>
<li>People who use Visual Studio Pro/Enterprise or Rider vs. those who use <a class="gblog-post__link" href="https://ionide.io/">Ionide</a>
 and Visual Studio Code</li>
<li>F# users are participate in the F# Software Foundation vs. those who do not</li>
<li>F# users who submit issues on GitHub vs. those who do not</li>
</ul>
<p>There are several other examples that I could think of if I was feeling more thoughtful. The two sides of the &ldquo;vs.&rdquo; aren&rsquo;t necessarily opposed. In fact, I know of several F# developers who have different personas depending on their work. But they are very different from one another.</p>
<p>The rest of this post will be a short meditation on this duality. I don&rsquo;t really have a whole lot of insight to offer here. But it is a unique challenge that I face every day.</p>
<p>F# is an open source project
I mention this first because I think it&rsquo;s actually the most important side of the F# project-product duality. Hell, we even say it in the F# marketing page: it&rsquo;s an open source, cross-platform functional language. There you have it, open source and cross-platform. But what does that even mean?</p>
<p>Firstly, in case you aren&rsquo;t aware, the F# compiler, F# core library, F# language service, and F# Visual Studio tooling are all 100% open source. You get to observe every bit of mind-numbing process related to flowing commits to different branches, every stupid mistake we make when we introduce a bug, and every &ldquo;whoopsie&rdquo; whenever we say something to a community member and we&rsquo;re proven wrong. And all the good stuff too, like active language development, new tooling features, and countless contributions from people all around the world.</p>
<p>The F# repository is governed, mostly, as such:</p>
<ul>
<li>We have a code of conduct and we act on it if necessary. It&rsquo;d be nice if we didn&rsquo;t need it. We banned a white supremacist for sending death threats to F# users and locked any issues he filed.</li>
<li>Issues are labeled and assigned a milestone (most of the time!). Milestones are always either &ldquo;Backlog&rdquo; or a release corresponding to a Visual Studio release. Backlog items get pulled into a release milestone if they&rsquo;re completed during the appropriate timeframe.</li>
<li>We may not comment on an issue, often because it is a straightforward bug and just needs to get tagged correctly. But we do strive to look at everything that is filed at least once, and typically do.</li>
<li>Code contributions usually require tests or some proof that they work if tests are silly/untenable.</li>
<li>Performance improvements usually require evidence of the improvement to be approved. Sometimes improvements are just obvious, so we&rsquo;ll take them without evidence.</li>
<li>Not all parts of the repo can be built everywhere, so we have several Solution files to ensure you can always build the repo in your environment of choice.</li>
<li>The best ideas usually win out on how to do something, and they do get discussed out in the open.</li>
<li>Sometimes an obvious improvement will be rejected, but it&rsquo;s usually for complicated reasons related to long-term maintenance and support. Sometimes the maintenance cost of adding something outweighs the benefit of users having it. It sucks, I know. But we cannot let technical debt hamstring us.</li>
<li>We have the privilege and the curse of incorporating Visual Studio components. It comes with great testing, compelling language tools, and a much larger userbase than many open source projects. But we are tethered to its processes and this often results in improvements taking time - sometimes months - before they are actually released to users. We try to keep a steady flow of improvements constantly moving in the codebase to remidiate the impact this has.</li>
<li>We have some internal servers that run a &ldquo;signed build&rdquo; for VS integration, it&rsquo;s closed-source, it sucks, and it sometimes stalls our infrastructure from moving forward for a month or two. We apologize, but if it makes you feel better, it slows us down too.</li>
<li>There&rsquo;s more to it, but I think this captures most of how we work in the open. There&rsquo;s some elements of being a product involved (especially as far as Visual Studio integration is concerned), but I like to think that we&rsquo;re really just a very active and fairly well-run open source project.</li>
</ul>
<p>But F# as an open source project is more than just the very literal aspects of the actual F# codebase being open source. The &ldquo;F# project&rdquo; involves many other open source entities, some of which include:</p>
<ul>
<li>The <a class="gblog-post__link" href="https://github.com/fsprojects">fsprojects</a>
 organization, a community-run incubation space that serves as a home for several open source projects (some of which are long past an &ldquo;incubation&rdquo; period!) and has a core group of administrators who ensure that active projects are always assigned at least one maintainer.</li>
<li>The <a class="gblog-post__link" href="https://github.com/fslaborg?type=source">fslab</a>
 organization, which is basically &ldquo;fsprojects but for data science and machine learning&rdquo;. Several independent projects suited towards analytical work live here, and like fsprojects, there is a core group of administrators who ensure that active projects are always assigned at least one maintainer.</li>
<li>The <a class="gblog-post__link" href="https://fable.io/">Fable</a>
 project and <a class="gblog-post__link" href="https://fable.io/community/">ecosystem</a>
, which transforms F# into a JavaScript-targeting language and comes with a vibrant set of libraries for building beautiful, modern web applications in F#.</li>
<li>The <a class="gblog-post__link" href="https://github.com/fsharp/FsAutoComplete">FsAutoComplete</a>
 project, which powers <a class="gblog-post__link" href="https://ionide.io/">Ionide and Visual Studio Code</a>
, and F# support in Vim and Emacs.</li>
<li>The <a class="gblog-post__link" href="https://ionide.io/">Ionide</a>
 project, which turns VSCode into an IDE and also provides several other awesome F# tools.</li>
<li>The <a class="gblog-post__link" href="https://safe-stack.github.io/">SAFE stack project</a>
, which composes several open source projects into a cohesive set that can be used to build full-stack F# apps (F# on the frontend and backend, yes!). Also comes with commercial support through several parties that contribute to SAFE.</li>
<li>The <a class="gblog-post__link" href="https://websharper.com/">WebSharper project</a>
, which is actually also a commercial product, where you build full-stack web apps in F#.</li>
<li>The <a class="gblog-post__link" href="https://fsbolero.io/">bolero project</a>
, which makes F# a WASM language (backed by a commercial entity).</li>
<li>The <a class="gblog-post__link" href="https://github.com/JetBrains/fsharp-support">Jetbrains Rider F# plugin</a>
 is how F# tooling works in Jetbrains Rider, powered by the same open source language service used by several other open source tools.</li>
</ul>
<p>There are many more, but hopefully my point about F# being an open source project matters. There are so many amazing things you can do with the language, all of which is rooted in the fact that F# is cross-platform, open source, and inviting towards a community of developers to empower them to build awesome shit. <strong>This is what being an open source project is all about</strong>.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="f-is-a-product">
        F# is a product
        <a data-clipboard-text="https://phillipcarter.dev/posts/fsharp-project-product-duality/#f-is-a-product" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor F# is a product" href="#f-is-a-product">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>The other side of F# is very different, and also has a more storied history. In fact, much of the early history of F# is well-documented in <a class="gblog-post__link" href="https://fsharp.org/history/">The Early History of F#</a>
, which I highly recommend reading. I won&rsquo;t discuss aspects of F# the product much before the time when I started working on it at Microsoft. This is partly because it&rsquo;s already well-documented, but also because the priorities of a product change over time, and I just don&rsquo;t know the details of what those priorities were prior to 2015.</p>
<p>For what I wager is the majority of F# developers, F# is a product more than it is an open source project. Far more people use the F# compiler and use F# packages than contribute back. This isn&rsquo;t inherently a bad thing, it&rsquo;s just the reality of how things work. Not everyone can or wants to spend their spare time doing open source work, and most people don&rsquo;t have an employer that lets them spend work time on OSS. I really wish employers paid employees to contribute back to the tools and components they use, but most don&rsquo;t, so that&rsquo;s just how it is right now.</p>
<p>F# the product surfaces in several ways:</p>
<ul>
<li>Delivered as a part of the .NET SDK, both Current and LTS trains, across the various mechanisms it can be installed</li>
<li>Delivered as a part of the <a class="gblog-post__link" href="https://github.com/dotnet/source-build">build from source</a>
 packaging for .NET</li>
<li>Delivered as a part of Visual Studio</li>
<li>Delivered as a part of Visual Studio for Mac</li>
<li>Delivered as a part of Jetbrains Rider</li>
<li>Delivered as NuGet packages, FSharp.Core and FSharp.Compiler.Service</li>
</ul>
<p>If you&rsquo;re using F# in Visual Studio, VS for Mac, or Rider then you&rsquo;re doing so under a license. Sometimes that license means it&rsquo;s 100% free (e.g., VS Community - which can be used by students, OSS developers, and small entities making under a certain threshold of revenue). But it&rsquo;s usually a paid license when you&rsquo;re using it professionally, since you&rsquo;re usually doing it for some company that makes money.</p>
<p>When you&rsquo;re in this setting you likely care deeply about several things:</p>
<ul>
<li>Setup/prerequisities - Getting a developer and runtime environment set up should be straightfoward. Complex aspects of this are improved over time.</li>
<li>Language compatibility - What compiled and ran yesterday must compile and run today.
Tooling compatibility - IDE behaviors don&rsquo;t randomly change. Actions you performed yesterday can be performed today.</li>
<li>Language reliability - New compiler bugs aren&rsquo;t introduced over time. Existing bugs are fixed over time.</li>
<li>Tooling reliability - Tooling doesn&rsquo;t break with updates. Existing problems are fixed over time.
Compiler performance - As your codebase grows, the compile times increase linearly with respect to your code size. The linear function isn&rsquo;t too high either. No exponential compile times, thank you! Compiler performance improves over time.</li>
<li>Runtime performance - The run time of your application doesn&rsquo;t regress over time. Existing problems are resolved over time and the run time gets faster with updates.</li>
<li>Tooling performance - As your codebase grows, you don&rsquo;t end up &ldquo;fighting the IDE&rdquo; or some other tool. Existing tooling performance problems are resolved over time, and the tools get faster too.</li>
<li>Language features - New features that unlock certain capabilities or let you simplify an approach to a problem are regularly delivered. Existing, high-use language features are improved over time.</li>
<li>Productivity features - New tooling features that let you see more information, navigate code, refactor code, etc. are regularly delivered. Existing features are enhanced over time.</li>
</ul>
<p>There&rsquo;s more, but I think that list covers the fundamentals. None of what I mentioned is exclusive to being a product. Every OSS developer cares about these things too. However, all of this can be achieved by a closed-source, proprietary language implementation and tooling. Community is not required. Extending capabilities for others to explore is not required. Having a diverse group of contributors is not required (although it does mean you need more staff on hand). And if feedback I&rsquo;ve seen over the years is any indicator, plenty of F# developers really don&rsquo;t care much about the aspects of &ldquo;F# is an open source project&rdquo;. After all, there&rsquo;s likely something not running 100% smoothly and the fact that F# can be used to build wonderful new web applications doesn&rsquo;t fix the problem they&rsquo;re seeing. Nor does any number of open source contributors adding features or fixing bugs that don&rsquo;t address the problem they&rsquo;re facing.</p>
<p>Dealing with the &ldquo;product&rdquo; aspects of F# takes a significant amount of time for me and everyone on the F# team at Microsoft. This isn&rsquo;t exactly surprising, though. We&rsquo;re paid to improve F# the product, so we do exactly that. What does that mean in practice? A few things.</p>
<p>First and foremost, we try to get more information out of paying customers. Are you working at a company using F# through Visual Studio? Are you paying Microsoft a lot of money through VS subscriptions, Azure subscriptions, and so on? If so, <strong>we want to hear from you</strong>. If you&rsquo;re paying a lot of money then your problems are &ldquo;premium problems&rdquo; that we prioritize above pretty much anything else. Microsoft has gone so far as to pay for me to fly out to a customer and just collect general feedback about using F# because their Azure bill was big enough for us to address general issues they might be having. In one such occaison, we found an embarassing compiler bug where we&rsquo;d stack overflow at build time. The person who told me about it didn&rsquo;t think much of it until my eyes got all wide, baffled as to why his build would fail like that. We got the bug fixed in time for the next Visual Studio update, and with it, a new F# compiler delivered with the fix across all channels. <strong>We would not have known about this issue without direct engagement</strong>.</p>
<p>We have a <a class="gblog-post__link" href="https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019">feedback system through Visual Studio</a>
 that can let us know if the person filing the bug is doing so from a paying account, and these are often treated with higher priority than other bugs. Exceptions to this rule are for obscure or &ldquo;the behavior sucks but it&rsquo;s by design and your use case is really just not reasonable&rdquo; issues. If it&rsquo;s one of the rare exceptional cases, we still treat replying and giving the best suggestion we can as a high priority. And in most cases, we&rsquo;ll still move it to GitHub and tag the issue as a low priority so it&rsquo;s clear how we&rsquo;ll treat it. At least then it&rsquo;s known, documented, and if more people come across it we can change the priority based on feedback. Or a curious OSS contributor can fix it themselves!</p>
<p>If you&rsquo;re not using a direct feedback channel or the Visual Studio one, our GitHub tracker is active and we treat triage with a high priority. At this point the blending of &ldquo;F# is a product&rdquo; and &ldquo;F# is an open source project&rdquo; occurs. Once you&rsquo;re on GitHub, it&rsquo;s an open source project. If an issue is low priority for us but high priority for you, you&rsquo;ll need to make a compelling case for us to fix it. Otherwise, we strive to make it as easy as possible for you to fix it yourself and unblock your use case. We&rsquo;ll help you along the way, just like we do any other contributor.</p>
<p>On GitHub, as mentioned earlier, we assign issues to milestones that match a Visual Studio release. Although we&rsquo;re an open source project, users of &ldquo;F# the product&rdquo; really do want to know when a fix or a new feature will become available. It lets us communicate this to people and acts as a nice historical record too. So, what gets priority? This is where things get interesting.</p>
<p>Managing an open source project that is also a product
Hopefully it&rsquo;s clear by now that the project-product duality of F# means that the two worlds get blended a lot. This manifests itself in several ways.</p>
<p>Most of the time, regressions, crashes, or anything affecting a paying customer gets the top priority for the F# team. Then comes divisional initiatives, like aligning with a .NET release, shipping interop support for a critical new component in .NET, a new tooling experience deemed essential to the .NET product strategy, and so on. Then come longstanding issues that impact your experience a lot, but aren&rsquo;t really a bug so much as a fundamental capability that&rsquo;s missing or designed incorrectly. Finally, the nebulous collection of &ldquo;medium severity&rdquo; issues are dealth with, which is kind of our way of acknowledging that a bug is a legit problem we&rsquo;ll try to get it if we can, but not low enough impact that we&rsquo;ll intentionally scope it out all the time.</p>
<p>But we also go the extra mile to ensure that &ldquo;F# as an open source project&rdquo; is healthy and improving over time. We&rsquo;re constantly tweaking the build of our repository, and usually improving it along the way. We spend a lot of time removing cruft so contributors have less concepts to understand before they can write code. We flesh out APIs that a handful of other open source projects consume, and extend new features so that they are more &ldquo;pluggable&rdquo; for tools like Fable or Bolero. We spend a significant amount of time reviewing contributions and helping people improve their contributions. We <a class="gblog-post__link" href="https://www.youtube.com/c/fsharporg/videos?view=0&amp;sort=p&amp;shelf_id=2">host webinars</a>
 where we walk through the F# compiler, demonstrate how to fix bugs, and give hints about low-friction ways you can contribute. We also try to document things and keep everything up to date through semi-regular audits of our contribution docs.</p>
<p>Concretely, this means we all work a lot more than just the working hours we put in for Microsoft. Does that mean we&rsquo;re overworked? I guess so. But it&rsquo;s our choice. It would be a hell of a lot easier for the F# team if F# were another closed-source product, like most of what Microsoft produces. But there&rsquo;s no way in hell we&rsquo;d ever consent to reverting back to the closed-source state that F# the product used to be in. The community we&rsquo;ve been able to connect with and help develop over time is essential. It&rsquo;s essential for F#&rsquo;s standing in the world. It&rsquo;s also essential for our own sanity. Fixing product bugs or doing performance analysis work can actually be quite therapeutic when the person you&rsquo;re fixing it for is positive, engaged, and excited to help. It makes coding fun, and even though it&rsquo;s still &ldquo;product work&rdquo; it&rsquo;s rewarding in its own right. That said, we do tend to be a lot more choosy about the things we work on when it&rsquo;s not working hours!</p>
<p>There are two traps we&rsquo;ve fallen into in the past, and are sure to continue to fall into in the future. The first is not treating a paying customer&rsquo;s issue with the appropriate amount of priority. In the world of open source, most people are consuming something for free. The maintainers have zero obligation to actually fix their issues. However, that is not true for a customer using a product! Maintainers absolutely have an obligation to fix their issues. The inverse can also be a problem. Treating curious but ultimately unimportant problems that people identify as if they impact paying customers is a dangerous trap to fall into. We try to do our best, but please be aware that this is just part and parcel of being open source.</p>
<p>Have ideas for how to approach this duality better? I&rsquo;d love to hear about it. You can reach me on twitter or over email.</p>
]]></content><category scheme="https://phillipcarter.dev/tags/fsharp" term="fsharp" label="fsharp"/><category scheme="https://phillipcarter.dev/tags/open-source" term="open-source" label="open source"/></entry><entry><title type="html">How to make an F# code fixer</title><link href="https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/?utm_source=atom_feed" rel="alternate" type="text/html" hreflang="en"/><id>https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/</id><published>2020-12-04T00:00:00+00:00</published><updated>2021-02-28T16:22:54-08:00</updated><content type="html"><![CDATA[<p>Note: this post does not apply to Jetbrains Rider. Rider uses its own engine for representing F# syntax expressions and has its own strongly-typed API for traversing and manipulating F# expressions.</p>
<p>F# tooling in Visual Studio and Visual Studio Code supports a variety quick fixes for fixing an error in your code. Here&rsquo;s an example of one:</p>















<div class="flex justify-center">
<figure class="gblog-post__figure">
    <a class="gblog-post__link--raw" href="/posts/how-to-make-an-fsharp-code-fixer/images/wrap-expression-in-parentheses.png">
        <img
            loading="lazy"
            
            src="/posts/how-to-make-an-fsharp-code-fixer/images/wrap-expression-in-parentheses_hu8e09b360e18351fba4f756a57821447e_57981_600x0_resize_box_2.png" alt="Wrap Expression in Parentheses Quick Fix"
            />
    </a>
    
    <figcaption>Wrap Expression in Parentheses Quick Fix</figcaption>
    
</figure>
</div>


<p>Pretty neat, right? This post will walk through the essentials of implementing a quick fix like this in either Visual Studio or VSCode.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="the-essential-pieces-of-an-editor-quick-fixer">
        The essential pieces of an editor Quick Fixer
        <a data-clipboard-text="https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#the-essential-pieces-of-an-editor-quick-fixer" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor The essential pieces of an editor Quick Fixer" href="#the-essential-pieces-of-an-editor-quick-fixer">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>Quick Fixes are pretty straightforward. They are comprised of 3 things:</p>
<ol>
<li>An editing environment that can &ldquo;listen&rdquo; for specific diagnostics (tracked by ID) and allow you to plug into that engine</li>
<li>A &ldquo;context&rdquo; for a Quick Fix that crucially contains the span/range of text in a document corresponding to an error or warning</li>
<li>Some code that registers itself as a plugin for that diagnostic ID and/or message contents, and/or some other condition (more on that later)</li>
<li>Some code that performs logic that rewrites a small section of the user&rsquo;s code to fix an issue
And that&rsquo;s it! The lifecycle is pretty simple, too:</li>
</ol>
<p>Periodically, an editing environment calls into the F# language service to process syntax and typecheck. This happens most often when you&rsquo;re typing (after a very short delay to account for the typing). When it&rsquo;s finished and there are syntax or typechecking errors, it raises appropriate diagnostics for the editing environment to report.</p>
<p>When this happens, any quick fix that is registered to &ldquo;listen&rdquo; to a particular diagnostic is made available to be triggered if and only if that diagnostic was raised. When the user does something like click a lightbulb in an editor or hit the right key command, all Quick Fixes that are available at that position are executed asynchronously, and the syntax transformation that they offer is also made available.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="each-editor-has-their-own-apis">
        Each editor has their own APIs
        <a data-clipboard-text="https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#each-editor-has-their-own-apis" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Each editor has their own APIs" href="#each-editor-has-their-own-apis">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>First things first: you can&rsquo;t just copy/paste a quick fix from Visual Studio into VSCode or vice/versa. Although a quick fix can share the same logic across editors, it must ultimately bind to the particular editor API that hosts it.</p>
<p>In the case of Visual Studio tooling for F#, the skeleton that wraps any custom logic generally looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">namespace</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">VisualStudio</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="n">Editor</span>

<span class="k">open</span> <span class="nn">System.Composition</span>
<span class="k">open</span> <span class="nn">System.Threading</span>
<span class="k">open</span> <span class="nn">System.Threading.Tasks</span>

<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.Text</span>
<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.CodeFixes</span>
<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.CodeActions</span>

<span class="o">[&lt;</span><span class="n">ExportCodeFixProvider</span><span class="o">(</span><span class="nn">FSharpConstants</span><span class="p">.</span><span class="n">FSharpLanguageName</span><span class="o">,</span> <span class="n">Name</span> <span class="o">=</span> <span class="s">&#34;NAME HERE&#34;</span><span class="o">);</span> <span class="n">Shared</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">internal</span> <span class="n">FSharpYourQuickFixNameHereFixProvider</span><span class="bp">()</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="n">CodeFixProvider</span><span class="bp">()</span>

    <span class="c1">// Any applicable diagnostic IDs go here
</span><span class="c1"></span>    <span class="k">let</span> <span class="nv">fixableDiagnosticIds</span> <span class="o">=</span> <span class="n">set</span> <span class="o">[</span><span class="s">&#34;FSXYZ&#34;</span><span class="o">]</span>

    <span class="k">override</span> <span class="n">_</span><span class="p">.</span><span class="nf">FixableDiagnosticIds</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span> <span class="n">fixableDiagnosticIds</span>

    <span class="k">override</span> <span class="n">this</span><span class="p">.</span><span class="nf">RegisterCodeFixesAsync</span> <span class="n">context</span> <span class="o">:</span> <span class="n">Task</span> <span class="o">=</span>
        <span class="n">async</span> <span class="o">{</span>
            <span class="c1">// Title comes from a resource file
</span><span class="c1"></span>            <span class="k">let</span> <span class="nv">title</span> <span class="o">=</span> <span class="nn">SR</span><span class="p">.</span><span class="n">WrapExpressionInParentheses</span><span class="bp">()</span>

            <span class="c1">// Custom logic can be written or called here
</span><span class="c1"></span>
            <span class="k">let</span> <span class="nv">applicableIDs</span> <span class="o">=</span>
                <span class="n">context</span><span class="o">.</span><span class="n">Diagnostics</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">this</span><span class="o">.</span><span class="n">FixableDiagnosticIds</span><span class="o">.</span><span class="n">Contains</span> <span class="n">x</span><span class="o">.</span><span class="n">Id</span><span class="o">)</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span>

            <span class="n">context</span><span class="o">.</span><span class="n">RegisterCodeFix</span><span class="o">(</span>
                <span class="nn">CodeAction</span><span class="p">.</span><span class="n">Create</span><span class="o">(</span>
                    <span class="n">title</span><span class="o">,</span>
                    <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">cancellationToken</span><span class="o">:</span> <span class="n">CancellationToken</span><span class="o">)</span> <span class="o">-&gt;</span>
                        <span class="n">async</span> <span class="o">{</span>
                            <span class="k">let!</span> <span class="nv">sourceText</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Document</span><span class="o">.</span><span class="n">GetTextAsync</span><span class="o">(</span><span class="n">cancellationToken</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="n">AwaitTask</span>
                            <span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="n">Document</span><span class="o">.</span><span class="n">WithText</span><span class="o">(</span><span class="c">(* TODO - code that changes text *)</span><span class="o">)</span>
                        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">StartAsyncAsTask</span><span class="o">(</span><span class="n">cancellationToken</span><span class="o">)),</span>
                    <span class="n">title</span><span class="o">),</span>
                    <span class="n">applicableIDs</span><span class="o">)</span>
        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">StartAsyncUnitAsTask</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">CancellationToken</span><span class="o">)</span>
</code></pre></div><p>It may seem like there&rsquo;s a lot going on here, but most of it is just glue code to ensure that everything is asynchronous and cancellable and runs in the Roslyn workspace host inside of Visual Studio. They key pieces are there:</p>
<p>Configuring a set of applicable diagnostics for the code fix
Code that registers a quick fix for the applicable diagnostics (asynchronous and cancellable)
Spots in the code to enter in custom logic and logic for manipulating user code
In VSCode (technically FsAutocomplete), a quick fix skeleton might look similar to this:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">yourCustomeCodeFix</span> <span class="o">(</span><span class="n">getFileLines</span><span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="n">Result</span><span class="o">&lt;</span><span class="kt">string</span> <span class="bp">[]</span><span class="o">,</span> <span class="o">_&gt;):</span> <span class="n">CodeFix</span> <span class="o">=</span>
    <span class="n">ifDiagnosticByCode</span>
        <span class="o">(</span><span class="k">fun</span> <span class="n">diagnostic</span> <span class="n">codeActionParams</span> <span class="o">-&gt;</span>
            <span class="k">match</span> <span class="n">getFileLines</span> <span class="o">(</span><span class="n">codeActionParams</span><span class="o">.</span><span class="n">TextDocument</span><span class="o">.</span><span class="n">GetFilePath</span><span class="bp">()</span><span class="o">)</span> <span class="k">with</span>
            <span class="o">|</span> <span class="n">Ok</span> <span class="n">lines</span> <span class="o">-&gt;</span>
                <span class="k">let</span> <span class="nv">erroringExpression</span> <span class="o">=</span> <span class="n">getText</span> <span class="n">lines</span> <span class="n">diagnostic</span><span class="o">.</span><span class="n">Range</span>
                <span class="n">async</span><span class="o">.</span><span class="n">Return</span> <span class="o">[</span> <span class="o">{</span> <span class="n">Title</span> <span class="o">=</span> <span class="s">&#34;your title here&#34;</span>
                                 <span class="n">File</span> <span class="o">=</span> <span class="n">codeActionParams</span><span class="o">.</span><span class="n">TextDocument</span>
                                 <span class="n">SourceDiagnostic</span> <span class="o">=</span> <span class="n">Some</span> <span class="n">diagnostic</span>
                                 <span class="n">Edits</span> <span class="o">=</span>
                                    <span class="o">[|</span> <span class="o">{</span> <span class="n">Range</span> <span class="o">=</span> <span class="n">diagnostic</span><span class="o">.</span><span class="n">Range</span>
                                         <span class="n">NewText</span> <span class="o">=</span> <span class="s">&#34;&#34;</span> <span class="c">(* TODO - define new text *)</span> <span class="o">}</span> <span class="o">|]</span>
                                 <span class="n">Kind</span> <span class="o">=</span> <span class="n">Fix</span> <span class="o">}</span> <span class="o">]</span>
            <span class="o">|</span> <span class="n">Error</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">async</span><span class="o">.</span><span class="n">Return</span> <span class="bp">[]</span><span class="o">)</span>
        <span class="o">(</span><span class="nn">Set</span><span class="p">.</span><span class="n">ofList</span> <span class="o">[</span> <span class="s">&#34;DIAGNOSTIC-IDS-HERE&#34;</span> <span class="o">])</span>
</code></pre></div><p>Due to some nice helper functionality it&rsquo;s less code, but the basic pieces are all the same.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="easy-quick-fixer-example-just-manipulating-text">
        Easy quick fixer example: just manipulating text
        <a data-clipboard-text="https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#easy-quick-fixer-example-just-manipulating-text" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Easy quick fixer example: just manipulating text" href="#easy-quick-fixer-example-just-manipulating-text">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>Sometimes, a quick fix can be trivial to implement because all you need to do is change an obviously incorrect span of text in a user&rsquo;s source code. The following example comes from a very common error:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">rng</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="n">Random</span><span class="bp">()</span>
<span class="k">let</span> <span class="nv">makeBigger</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">2</span>
<span class="n">makeBigger</span> <span class="n">rng</span><span class="o">.</span><span class="n">Next</span><span class="o">(</span><span class="n">5</span><span class="o">)</span>
</code></pre></div><p>This code seems like it might be right, but the compiler complains because it thinks that the <code>(5)</code> is another argument being passed to <code>makeBigger</code>. It&rsquo;s a &ldquo;classic&rdquo; F# compiler error that is usually resolved by adding parentheses. So, why not make a Code Fix that adds the parentheses? As it turns out, that is trivial.</p>
<p>Here&rsquo;s how it is done in Visual Studio:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">namespace</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">VisualStudio</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="n">Editor</span>

<span class="k">open</span> <span class="nn">System.Composition</span>
<span class="k">open</span> <span class="nn">System.Threading</span>
<span class="k">open</span> <span class="nn">System.Threading.Tasks</span>

<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.Text</span>
<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.CodeFixes</span>
<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.CodeActions</span>

<span class="o">[&lt;</span><span class="n">ExportCodeFixProvider</span><span class="o">(</span><span class="nn">FSharpConstants</span><span class="p">.</span><span class="n">FSharpLanguageName</span><span class="o">,</span> <span class="n">Name</span> <span class="o">=</span> <span class="s">&#34;AddParentheses&#34;</span><span class="o">);</span> <span class="n">Shared</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">internal</span> <span class="n">FSharpWrapExpressionInParenthesesFixProvider</span><span class="bp">()</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="n">CodeFixProvider</span><span class="bp">()</span>

    <span class="c1">// FS0597 is the ID for the diagnostic that gets triggered
</span><span class="c1"></span>    <span class="k">let</span> <span class="nv">fixableDiagnosticIds</span> <span class="o">=</span> <span class="n">set</span> <span class="o">[</span><span class="s">&#34;FS0597&#34;</span><span class="o">]</span>

    <span class="k">override</span> <span class="n">_</span><span class="p">.</span><span class="nf">FixableDiagnosticIds</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span> <span class="n">fixableDiagnosticIds</span>

    <span class="k">override</span> <span class="n">this</span><span class="p">.</span><span class="nf">RegisterCodeFixesAsync</span> <span class="n">context</span> <span class="o">:</span> <span class="n">Task</span> <span class="o">=</span>
        <span class="n">async</span> <span class="o">{</span>
            <span class="c1">// Title comes from a resource file
</span><span class="c1"></span>            <span class="k">let</span> <span class="nv">title</span> <span class="o">=</span> <span class="nn">SR</span><span class="p">.</span><span class="n">WrapExpressionInParentheses</span><span class="bp">()</span>

            <span class="k">let</span> <span class="nv">applicableIDs</span> <span class="o">=</span>
                <span class="n">context</span><span class="o">.</span><span class="n">Diagnostics</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">this</span><span class="o">.</span><span class="n">FixableDiagnosticIds</span><span class="o">.</span><span class="n">Contains</span> <span class="n">x</span><span class="o">.</span><span class="n">Id</span><span class="o">)</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span>

            <span class="c1">// This will wrap a range of text in parentheses
</span><span class="c1"></span>            <span class="k">let</span> <span class="nv">getChangedText</span> <span class="o">(</span><span class="n">sourceText</span><span class="o">:</span> <span class="n">SourceText</span><span class="o">)</span> <span class="o">=</span>
                <span class="n">sourceText</span><span class="o">.</span><span class="n">WithChanges</span><span class="o">(</span><span class="n">TextChange</span><span class="o">(</span><span class="n">TextSpan</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">Span</span><span class="o">.</span><span class="n">Start</span><span class="o">,</span> <span class="n">0</span><span class="o">),</span> <span class="s">&#34;(&#34;</span><span class="o">))</span>
                          <span class="o">.</span><span class="n">WithChanges</span><span class="o">(</span><span class="n">TextChange</span><span class="o">(</span><span class="n">TextSpan</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">Span</span><span class="o">.</span><span class="n">End</span><span class="o">,</span> <span class="n">0</span><span class="o">),</span> <span class="s">&#34;)&#34;</span><span class="o">))</span>

            <span class="n">context</span><span class="o">.</span><span class="n">RegisterCodeFix</span><span class="o">(</span>
                <span class="nn">CodeAction</span><span class="p">.</span><span class="n">Create</span><span class="o">(</span>
                    <span class="n">title</span><span class="o">,</span>
                    <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">cancellationToken</span><span class="o">:</span> <span class="n">CancellationToken</span><span class="o">)</span> <span class="o">-&gt;</span>
                        <span class="n">async</span> <span class="o">{</span>
                            <span class="k">let!</span> <span class="nv">sourceText</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Document</span><span class="o">.</span><span class="n">GetTextAsync</span><span class="o">(</span><span class="n">cancellationToken</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="n">AwaitTask</span>
                            <span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="n">Document</span><span class="o">.</span><span class="n">WithText</span><span class="o">(</span><span class="n">getChangedText</span> <span class="n">sourceText</span><span class="o">)</span>
                        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">StartAsyncAsTask</span><span class="o">(</span><span class="n">cancellationToken</span><span class="o">)),</span>
                    <span class="n">title</span><span class="o">),</span>
                    <span class="n">applicableIDs</span><span class="o">)</span>
        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">StartAsyncUnitAsTask</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">CancellationToken</span><span class="o">)</span>
</code></pre></div><p>Because the diagnostic itself has a range that encapsulates the entire troublesome expression, all we need to do is wrap parentheses around that range in a document.</p>
<p>The same quick fix in VSCode looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="sd">/// a codefix that parenthesizes a member expression that needs it
</span><span class="sd"></span><span class="k">let</span> <span class="nv">parenthesizeExpression</span> <span class="o">(</span><span class="n">getFileLines</span><span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="n">Result</span><span class="o">&lt;</span><span class="kt">string</span> <span class="bp">[]</span><span class="o">,</span> <span class="o">_&gt;):</span> <span class="n">CodeFix</span> <span class="o">=</span>
  <span class="n">ifDiagnosticByCode</span>
    <span class="o">(</span><span class="k">fun</span> <span class="n">diagnostic</span> <span class="n">codeActionParams</span> <span class="o">-&gt;</span>
      <span class="k">match</span> <span class="n">getFileLines</span> <span class="o">(</span><span class="n">codeActionParams</span><span class="o">.</span><span class="n">TextDocument</span><span class="o">.</span><span class="n">GetFilePath</span><span class="bp">()</span><span class="o">)</span> <span class="k">with</span>
      <span class="o">|</span> <span class="n">Ok</span> <span class="n">lines</span> <span class="o">-&gt;</span>
          <span class="k">let</span> <span class="nv">erroringExpression</span> <span class="o">=</span> <span class="n">getText</span> <span class="n">lines</span> <span class="n">diagnostic</span><span class="o">.</span><span class="n">Range</span>
          <span class="n">async</span><span class="o">.</span><span class="n">Return</span> <span class="o">[</span> <span class="o">{</span> <span class="n">Title</span> <span class="o">=</span> <span class="s">&#34;Wrap expression in parentheses&#34;</span>
                           <span class="n">File</span> <span class="o">=</span> <span class="n">codeActionParams</span><span class="o">.</span><span class="n">TextDocument</span>
                           <span class="n">SourceDiagnostic</span> <span class="o">=</span> <span class="n">Some</span> <span class="n">diagnostic</span>
                           <span class="n">Edits</span> <span class="o">=</span>
                               <span class="o">[|</span> <span class="o">{</span> <span class="n">Range</span> <span class="o">=</span> <span class="n">diagnostic</span><span class="o">.</span><span class="n">Range</span>
                                    <span class="c1">// Using a string interpolation to supply new text
</span><span class="c1"></span>                                    <span class="n">NewText</span> <span class="o">=</span> <span class="o">$</span><span class="s">&#34;(%s{erroringExpression})&#34;</span> <span class="o">}</span> <span class="o">|]</span>
                                    <span class="n">Kind</span> <span class="o">=</span> <span class="n">Fix</span> <span class="o">}</span> <span class="o">]</span>
      <span class="o">|</span> <span class="n">Error</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">async</span><span class="o">.</span><span class="n">Return</span> <span class="bp">[]</span><span class="o">)</span>
    <span class="o">(</span><span class="nn">Set</span><span class="p">.</span><span class="n">ofList</span> <span class="o">[</span> <span class="s">&#34;597&#34;</span> <span class="o">])</span>
</code></pre></div><p>This kind of easy quick fix can be written becase we have all the information we need right there. However, not every quick fix can be written so easily.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="harder-quick-fixer-example-scanning-the-text-in-a-document">
        Harder quick fixer example: scanning the text in a document
        <a data-clipboard-text="https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#harder-quick-fixer-example-scanning-the-text-in-a-document" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Harder quick fixer example: scanning the text in a document" href="#harder-quick-fixer-example-scanning-the-text-in-a-document">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>Sometimes the error range for a diagnostic isn&rsquo;t enough information to inform a quick fix. But not all is lost! Sometimes all you have to do is scan through a document until you find something that gives you the information you need.</p>
<p>Consider the following error:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="o">[&lt;</span><span class="n">EntryPoint</span><span class="o">&gt;]</span>
<span class="k">let</span> <span class="nv">main</span> <span class="n">argv</span> <span class="o">=</span>
    <span class="c1">// &#39;argv -1&#39; is an error
</span><span class="c1"></span>    <span class="c1">// The range of the error, however, is only &#39;argv&#39;
</span><span class="c1"></span>    <span class="k">for</span> <span class="n">x</span> <span class="o">=</span> <span class="n">0</span> <span class="k">to</span> <span class="n">argv</span> <span class="o">-</span><span class="n">1</span> <span class="k">do</span>
        <span class="n">printfn</span> <span class="s">&#34;uuuhhhhh&#34;</span>
</code></pre></div><p>The compiler will complain because it things you&rsquo;re calling argv as a function and passing <code>-1</code> to it. This can happen because <code>-</code> is both a binary and a unary operator, and the F# parser parses <code>-1</code> as a negation on 1, and the entire text of <code>-1</code> as a value being passed to argv. Since argv is not a function, this is obviously not correct.</p>
<p>Because the compiler error&rsquo;s range corresponds to argv, we don&rsquo;t actually have enough information to know that we can place a space between the <code>-</code> and the <code>1</code>. In fact, based on the error range being only for argv, we don&rsquo;t even know where in source the <code>-1</code> is! So we&rsquo;ll not only need to find its location, but also ensure that the next construct that comes after argv is indeed a <code>-</code>.</p>
<p>Luckily, this can be done as a recursive function or loop. Here&rsquo;s an example of scanning forward past the span corresponding to the diagnostic using Visual Studio APIs:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">pos</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Span</span><span class="o">.</span><span class="n">End</span> <span class="o">+</span> <span class="n">1</span>

<span class="k">let</span> <span class="nv">nextNonWhitespaceText</span> <span class="o">=</span>
    <span class="k">let</span> <span class="nv">rec</span> <span class="n">loop</span> <span class="n">str</span> <span class="n">pos</span> <span class="o">=</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="o">(</span><span class="nn">String</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="o">(</span><span class="n">str</span><span class="o">))</span> <span class="k">then</span>
            <span class="n">str</span>
        <span class="k">else</span>
            <span class="n">loop</span> <span class="o">(</span><span class="n">sourceText</span><span class="o">.</span><span class="n">GetSubText</span><span class="o">(</span><span class="n">TextSpan</span><span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">)))</span> <span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="n">1</span><span class="o">)</span>
    <span class="n">loop</span> <span class="o">(</span><span class="n">sourceText</span><span class="o">.</span><span class="n">GetSubText</span><span class="o">(</span><span class="n">TextSpan</span><span class="o">(</span><span class="n">pos</span><span class="o">,</span> <span class="n">1</span><span class="o">)))</span> <span class="n">pos</span>
</code></pre></div><p>This will grab a span of text that&rsquo;s exactly one character long, check it, and keep going until it&rsquo;s not whitespace. We can then check that nextNonWhitespaceText is equal to <code>-</code>. If it is, we can trigger a code fix! Here&rsquo;s how the entire code fixer can look:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">namespace</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">VisualStudio</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="n">Editor</span>

<span class="k">open</span> <span class="nn">System</span>
<span class="k">open</span> <span class="nn">System.Composition</span>
<span class="k">open</span> <span class="nn">System.Threading.Tasks</span>

<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.Text</span>
<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.CodeFixes</span>

<span class="o">[&lt;</span><span class="n">ExportCodeFixProvider</span><span class="o">(</span><span class="nn">FSharpConstants</span><span class="p">.</span><span class="n">FSharpLanguageName</span><span class="o">,</span> <span class="n">Name</span> <span class="o">=</span> <span class="s">&#34;ChangePrefixNegationToInfixSubtraction&#34;</span><span class="o">);</span> <span class="n">Shared</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">internal</span> <span class="n">FSharpChangePrefixNegationToInfixSubtractionodeFixProvider</span><span class="bp">()</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="n">CodeFixProvider</span><span class="bp">()</span>

    <span class="k">let</span> <span class="nv">fixableDiagnosticIds</span> <span class="o">=</span> <span class="n">set</span> <span class="o">[</span><span class="s">&#34;FS0003&#34;</span><span class="o">]</span>

    <span class="k">override</span> <span class="n">_</span><span class="p">.</span><span class="nf">FixableDiagnosticIds</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span> <span class="n">fixableDiagnosticIds</span>

    <span class="k">override</span> <span class="n">_</span><span class="p">.</span><span class="nf">RegisterCodeFixesAsync</span> <span class="n">context</span> <span class="o">:</span> <span class="n">Task</span> <span class="o">=</span>
        <span class="n">asyncMaybe</span> <span class="o">{</span>
            <span class="k">let</span> <span class="nv">diagnostics</span> <span class="o">=</span>
                <span class="n">context</span><span class="o">.</span><span class="n">Diagnostics</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">fixableDiagnosticIds</span> <span class="o">|&gt;</span> <span class="nn">Set</span><span class="p">.</span><span class="n">contains</span> <span class="n">x</span><span class="o">.</span><span class="n">Id</span><span class="o">)</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span>

            <span class="k">let!</span> <span class="nv">sourceText</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Document</span><span class="o">.</span><span class="n">GetTextAsync</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">CancellationToken</span><span class="o">)</span>

            <span class="c1">// End of &#39;argv&#39;, in the case of the example above
</span><span class="c1"></span>            <span class="k">let</span> <span class="nv">pos</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Span</span><span class="o">.</span><span class="n">End</span> <span class="o">+</span> <span class="n">1</span>

            <span class="c1">// This won&#39;t ever actually happen, but it&#39;s good to check
</span><span class="c1"></span>            <span class="k">do</span><span class="o">!</span> <span class="nn">Option</span><span class="p">.</span><span class="n">guard</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="n">sourceText</span><span class="o">.</span><span class="n">Length</span><span class="o">)</span>

            <span class="k">let</span> <span class="nv">nextNonWhitespaceText</span> <span class="o">=</span>
                <span class="k">let</span> <span class="nv">rec</span> <span class="n">loop</span> <span class="n">str</span> <span class="n">pos</span> <span class="o">=</span>
                    <span class="k">if</span> <span class="ow">not</span> <span class="o">(</span><span class="nn">String</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="o">(</span><span class="n">str</span><span class="o">))</span> <span class="k">then</span>
                        <span class="n">str</span>
                    <span class="k">else</span>
                        <span class="n">loop</span> <span class="o">(</span><span class="n">sourceText</span><span class="o">.</span><span class="n">GetSubText</span><span class="o">(</span><span class="n">TextSpan</span><span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">)))</span> <span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="n">1</span><span class="o">)</span>
                <span class="n">loop</span> <span class="o">(</span><span class="n">sourceText</span><span class="o">.</span><span class="n">GetSubText</span><span class="o">(</span><span class="n">TextSpan</span><span class="o">(</span><span class="n">pos</span><span class="o">,</span> <span class="n">1</span><span class="o">)))</span> <span class="n">pos</span>

            <span class="c1">// Bail if this isn&#39;t a negation
</span><span class="c1"></span>            <span class="k">do</span><span class="o">!</span> <span class="nn">Option</span><span class="p">.</span><span class="n">guard</span> <span class="o">(</span><span class="n">nextNonWhitespaceText</span> <span class="o">=</span> <span class="s">&#34;-&#34;</span><span class="o">)</span>

            <span class="k">let</span> <span class="nv">title</span> <span class="o">=</span> <span class="nn">SR</span><span class="p">.</span><span class="n">ChangePrefixNegationToInfixSubtraction</span><span class="bp">()</span>

            <span class="k">let</span> <span class="nv">codeFix</span> <span class="o">=</span>
                <span class="nn">CodeFixHelpers</span><span class="p">.</span><span class="n">createTextChangeCodeFix</span><span class="o">(</span>
                    <span class="n">title</span><span class="o">,</span>
                    <span class="n">context</span><span class="o">,</span>
                    <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">asyncMaybe</span><span class="o">.</span><span class="n">Return</span> <span class="o">[|</span> <span class="n">TextChange</span><span class="o">(</span><span class="n">TextSpan</span><span class="o">(</span><span class="n">pos</span><span class="o">,</span> <span class="n">1</span><span class="o">),</span> <span class="s">&#34;- &#34;</span><span class="o">)</span> <span class="o">|]))</span>

            <span class="n">context</span><span class="o">.</span><span class="n">RegisterCodeFix</span><span class="o">(</span><span class="n">codeFix</span><span class="o">,</span> <span class="n">diagnostics</span><span class="o">)</span>
        <span class="o">}</span>
        <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="n">Ignore</span>
        <span class="o">|&gt;</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">StartAsyncUnitAsTask</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">CancellationToken</span><span class="o">)</span>
</code></pre></div><p>Note that the API calls are slightly different here. There is a helper defined called <code>createTextChangeCodeFix</code> that can be used, unlike in the previous example.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="harder-quick-fixe-example-checking-the-syntax-tree">
        Harder quick fixe example: checking the syntax tree
        <a data-clipboard-text="https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#harder-quick-fixe-example-checking-the-syntax-tree" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Harder quick fixe example: checking the syntax tree" href="#harder-quick-fixe-example-checking-the-syntax-tree">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>Now things get a little more challenging. In the previous two examples, we could either work directly with a span of text in a document and change it, or scan the document to find what we need. But what if that&rsquo;s not enough? In some cases, you need to answer a more complicated question that corresponds to the actual struture of F# source code. Consider the following incorrect code:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">f</span> <span class="o">(</span><span class="n">x</span><span class="o">:</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">(</span><span class="n">y</span><span class="o">:</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">=</span>
    <span class="o">!</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">y</span>
</code></pre></div><p>Someone without much F# (or OCaml) experience might thing that this is a boolean <code>not</code> operation. However, it is not! The <code>!</code> operator is used to dereference a <a class="gblog-post__link" href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/reference-cells">Reference Cell</a>
. A correct fix would be to use the <code>not</code> operator:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">f</span> <span class="o">(</span><span class="n">x</span><span class="o">:</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">(</span><span class="n">y</span><span class="o">:</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">=</span>
    <span class="ow">not</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="ow">not</span> <span class="n">y</span>
</code></pre></div><p>The diagnostic triggers on both <code>x</code> and <code>y</code> but it does not contain the text or position of !. Although it&rsquo;s possible to scan in a document to find the <code>!</code>, there&rsquo;s actually a much better approach: using the F# syntax tree APIs. Instead of relying on potentially error-prone custom scanning code, checking if a span of text is contained in a deference call (using <code>!</code>) will always be correct.</p>
<p>This can be trivially accomplished with a type extension on <code>FSharpParseFileResults</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">open</span> <span class="nn">FSharp.Compiler</span>
<span class="k">open</span> <span class="nn">FSharp.Compiler.Text</span>
<span class="k">open</span> <span class="nn">FSharp.Compiler.Range</span>
<span class="k">open</span> <span class="nn">FSharp.Compiler.SourceCodeServices</span>

<span class="o">[&lt;</span><span class="n">AutoOpen</span><span class="o">&gt;]</span>
<span class="k">module</span> <span class="nn">ParseTreeExtensions</span> <span class="o">=</span>
    <span class="k">type</span> <span class="nc">FSharpParseFileResults</span> <span class="k">with</span>
        <span class="k">member</span> <span class="n">scope</span><span class="p">.</span><span class="nf">TryRangeOfRefCellDereferenceContainingPos</span> <span class="n">expressionPos</span> <span class="o">=</span>
            <span class="k">match</span> <span class="n">scope</span><span class="o">.</span><span class="n">ParseTree</span> <span class="k">with</span>
            <span class="o">|</span> <span class="n">Some</span> <span class="n">input</span> <span class="o">-&gt;</span>
                <span class="nn">AstTraversal</span><span class="p">.</span><span class="n">Traverse</span><span class="o">(</span><span class="n">expressionPos</span><span class="o">,</span> <span class="n">input</span><span class="o">,</span> <span class="o">{</span> <span class="k">new</span> <span class="nn">AstTraversal</span><span class="p">.</span><span class="n">AstVisitorBase</span><span class="o">&lt;_&gt;</span><span class="bp">()</span> <span class="k">with</span>
                    <span class="k">member</span> <span class="n">_</span><span class="p">.</span><span class="nf">VisitExpr</span><span class="o">(_,</span> <span class="o">_,</span> <span class="n">defaultTraverse</span><span class="o">,</span> <span class="n">expr</span><span class="o">)</span> <span class="o">=</span>
                        <span class="k">match</span> <span class="n">expr</span> <span class="k">with</span>
                        <span class="o">|</span> <span class="nn">SynExpr</span><span class="p">.</span><span class="n">App</span><span class="o">(_,</span> <span class="k">false</span><span class="o">,</span> <span class="nn">SynExpr</span><span class="p">.</span><span class="n">Ident</span> <span class="n">funcIdent</span><span class="o">,</span> <span class="n">expr</span><span class="o">,</span> <span class="o">_)</span> <span class="o">-&gt;</span>
                            <span class="k">if</span> <span class="n">funcIdent</span><span class="o">.</span><span class="n">idText</span> <span class="o">=</span> <span class="s">&#34;op_Dereference&#34;</span> <span class="o">&amp;&amp;</span> <span class="n">rangeContainsPos</span> <span class="n">expr</span><span class="o">.</span><span class="n">Range</span> <span class="n">expressionPos</span> <span class="k">then</span>
                                <span class="n">Some</span> <span class="n">funcIdent</span><span class="o">.</span><span class="n">idRange</span>
                            <span class="k">else</span>
                                <span class="n">None</span>
                        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">defaultTraverse</span> <span class="n">expr</span> <span class="o">})</span>
            <span class="o">|</span> <span class="n">None</span> <span class="o">-&gt;</span> <span class="n">None</span>
</code></pre></div><p>The F# compiler services contain, among other things, a syntax tree visitor that has some default behavior you can override. You still need to implement <code>VisitExpr</code>, which is the exact one we&rsquo;re going to work with here.</p>
<p>If it looks complicated, don&rsquo;t worry! It&rsquo;s really not too bad. There is just a bit of terminology to understand:</p>
<ul>
<li>&ldquo;Range&rdquo; and &ldquo;Pos&rdquo;, such as in the <code>rangeContainsPos</code> call, refer to a range of text in a document (a line/column pair) and a position (a line and a column)</li>
<li><code>SynExpr.App</code> refers to a function application. All function applications contain a function expression and a argument expression of type <code>SynExpr</code></li>
<li><code>SynExpr.Ident</code> refers to an identifer in a syntax tree. It has a name (<code>idText</code>) and a range (<code>idRange</code>)</li>
</ul>
<p>In this case, the expression <code>!x</code> (or any of variant including arbitrary nesting of parentheses or whitespace) is just a <code>SynExpr.App</code> where the function expression is a <code>SynExpr.Ident</code> with <code>idText</code> of <code>op_Dereference</code>. So we just need to check that a given position is contained in the range of the argument that is being applied to <code>!</code>.</p>
<p>So, how do we call this? That&rsquo;s where a given editor API comes into play. In the case of Visual Studio, we need to convert from a Roslyn-based span of text to an F# compiler-based range of text (note the difference in terminology). Even though they both refer to the same thing, they have slightly different ways of representing the data.</p>
<p>We also need to parse a document to get access to an instance of <code>FSharpParseFileResults</code>. So if we refer back to the skeleton source code, the custom logic here is:</p>
<ol>
<li>Parse a document</li>
<li>Convert the code fix context&rsquo;s span of text into an F# range</li>
<li>Call our extension to <code>FSharpParseFileResults</code></li>
<li>Apply a code fix to the <code>!</code> if it exists</li>
</ol>
<p>Here&rsquo;s the full code snippet of the fixer:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">namespace</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">VisualStudio</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="n">Editor</span>

<span class="k">open</span> <span class="nn">System.Composition</span>
<span class="k">open</span> <span class="nn">System.Threading.Tasks</span>

<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.Text</span>
<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.CodeFixes</span>

<span class="o">[&lt;</span><span class="n">ExportCodeFixProvider</span><span class="o">(</span><span class="nn">FSharpConstants</span><span class="p">.</span><span class="n">FSharpLanguageName</span><span class="o">,</span> <span class="n">Name</span> <span class="o">=</span> <span class="s">&#34;ChangeRefCellDerefToNotExpression&#34;</span><span class="o">);</span> <span class="n">Shared</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">internal</span> <span class="n">FSharpChangeRefCellDerefToNotExpressionCodeFixProvider</span>
    <span class="o">[&lt;</span><span class="n">ImportingConstructor</span><span class="o">&gt;]</span>
    <span class="o">(</span>
        <span class="n">checkerProvider</span><span class="o">:</span> <span class="n">FSharpCheckerProvider</span><span class="o">,</span>
        <span class="n">projectInfoManager</span><span class="o">:</span> <span class="n">FSharpProjectOptionsManager</span>
    <span class="o">)</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="n">CodeFixProvider</span><span class="bp">()</span>

    <span class="k">static</span> <span class="k">let</span> <span class="nv">userOpName</span> <span class="o">=</span> <span class="s">&#34;FSharpChangeRefCellDerefToNotExpressionCodeFix&#34;</span>
    <span class="k">let</span> <span class="nv">fixableDiagnosticIds</span> <span class="o">=</span> <span class="n">set</span> <span class="o">[</span><span class="s">&#34;FS0001&#34;</span><span class="o">]</span>

    <span class="k">override</span> <span class="n">__</span><span class="p">.</span><span class="nf">FixableDiagnosticIds</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span> <span class="n">fixableDiagnosticIds</span>

    <span class="k">override</span> <span class="n">this</span><span class="p">.</span><span class="nf">RegisterCodeFixesAsync</span> <span class="n">context</span> <span class="o">:</span> <span class="n">Task</span> <span class="o">=</span>
        <span class="n">asyncMaybe</span> <span class="o">{</span>
            <span class="c1">// All of this is setup to be able to parse a document
</span><span class="c1"></span>            <span class="k">let</span> <span class="nv">document</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Document</span>
            <span class="k">let!</span> <span class="nv">parsingOptions</span><span class="o">,</span> <span class="o">_</span> <span class="o">=</span> <span class="n">projectInfoManager</span><span class="o">.</span><span class="n">TryGetOptionsForEditingDocumentOrProject</span><span class="o">(</span><span class="n">document</span><span class="o">,</span> <span class="n">context</span><span class="o">.</span><span class="n">CancellationToken</span><span class="o">,</span> <span class="n">userOpName</span><span class="o">)</span>
            <span class="k">let!</span> <span class="nv">sourceText</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Document</span><span class="o">.</span><span class="n">GetTextAsync</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">CancellationToken</span><span class="o">)</span>

            <span class="c1">// The actual parsing call, which is slightly complex
</span><span class="c1"></span>            <span class="k">let!</span> <span class="nv">parseResults</span> <span class="o">=</span> <span class="n">checkerProvider</span><span class="o">.</span><span class="n">Checker</span><span class="o">.</span><span class="n">ParseFile</span><span class="o">(</span><span class="n">document</span><span class="o">.</span><span class="n">FilePath</span><span class="o">,</span> <span class="n">sourceText</span><span class="o">.</span><span class="n">ToFSharpSourceText</span><span class="bp">()</span><span class="o">,</span> <span class="n">parsingOptions</span><span class="o">,</span> <span class="n">userOpName</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">liftAsync</span>

            <span class="c1">// Converting to an F# range
</span><span class="c1"></span>            <span class="k">let</span> <span class="nv">errorRange</span> <span class="o">=</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">TextSpanToFSharpRange</span><span class="o">(</span><span class="n">document</span><span class="o">.</span><span class="n">FilePath</span><span class="o">,</span> <span class="n">context</span><span class="o">.</span><span class="n">Span</span><span class="o">,</span> <span class="n">sourceText</span><span class="o">)</span>

            <span class="c1">// Getting a range of a dereference operator
</span><span class="c1"></span>            <span class="k">let!</span> <span class="nv">derefRange</span> <span class="o">=</span> <span class="n">parseResults</span><span class="o">.</span><span class="n">TryRangeOfRefCellDereferenceContainingPos</span> <span class="n">errorRange</span><span class="o">.</span><span class="n">Start</span>

            <span class="c1">// Converting back into Roslyn-based spans
</span><span class="c1"></span>            <span class="k">let!</span> <span class="nv">derefSpan</span> <span class="o">=</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">TryFSharpRangeToTextSpan</span><span class="o">(</span><span class="n">sourceText</span><span class="o">,</span> <span class="n">derefRange</span><span class="o">)</span>

            <span class="k">let</span> <span class="nv">title</span> <span class="o">=</span> <span class="nn">SR</span><span class="p">.</span><span class="n">UseNotForNegation</span><span class="bp">()</span>

            <span class="k">let</span> <span class="nv">diagnostics</span> <span class="o">=</span>
                <span class="n">context</span><span class="o">.</span><span class="n">Diagnostics</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">fixableDiagnosticIds</span> <span class="o">|&gt;</span> <span class="nn">Set</span><span class="p">.</span><span class="n">contains</span> <span class="n">x</span><span class="o">.</span><span class="n">Id</span><span class="o">)</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span>

            <span class="k">let</span> <span class="nv">codeFix</span> <span class="o">=</span>
                <span class="nn">CodeFixHelpers</span><span class="p">.</span><span class="n">createTextChangeCodeFix</span><span class="o">(</span>
                    <span class="n">title</span><span class="o">,</span>
                    <span class="n">context</span><span class="o">,</span>

                    <span class="c1">// The actual fix is trivial, just place `!` with `not `
</span><span class="c1"></span>                    <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">asyncMaybe</span><span class="o">.</span><span class="n">Return</span> <span class="o">[|</span> <span class="n">TextChange</span><span class="o">(</span><span class="n">derefSpan</span><span class="o">,</span> <span class="s">&#34;not &#34;</span><span class="o">)</span> <span class="o">|]))</span>

            <span class="n">context</span><span class="o">.</span><span class="n">RegisterCodeFix</span><span class="o">(</span><span class="n">codeFix</span><span class="o">,</span> <span class="n">diagnostics</span><span class="o">)</span>
        <span class="o">}</span>
        <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="n">Ignore</span>
        <span class="o">|&gt;</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">StartAsyncUnitAsTask</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">CancellationToken</span><span class="o">)</span>
</code></pre></div><p>And that&rsquo;s it! There&rsquo;s a bit of ceremony to get access to the data we need and to convert back and forth between different textual representations, but after that the actual code fix is trivial.</p>
<p>Harder quick fixer example: analyzing semantics
Finally, you may also need to analyze F# semantics to be able to offer up a quick fix. Some errors that involve typechecking require you to analyze typecheck results to get the information that you&rsquo;re after.</p>
<p>Consider the following code:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">x</span> <span class="o">=</span> <span class="n">12</span>
<span class="n">x</span> <span class="o">&lt;-</span> <span class="n">13</span>
</code></pre></div><p>This will fail to compile because we&rsquo;re trying to mutate <code>x</code>, but it isn&rsquo;t declared as <code>mutable</code>. I personally run into this all the time because I won&rsquo;t always know that I want to mutate something until I decide it&rsquo;s necessary, then I have to go back and modify the declaration manually. Why not have a quick fixer do that?</p>
<p>To make this quick fixer, we need to now also analyze semantics, because we need to find the declaration location of a given value. Specifically, we&rsquo;ll need to do the following:</p>
<ol>
<li>Find the F# symbol for <code>x</code> in the erroneous <code>x &lt;- 13</code> call</li>
<li>Find the declaration of <code>x</code> once we&rsquo;ve resolved it at its use</li>
<li>Check that it&rsquo;s not a parameter (if it is, we can&rsquo;t declare it as <code>mutable</code>)</li>
<li>Apply the <code>mutable</code> keyword to the declaration of <code>x</code></li>
</ol>
<p>There&rsquo;s more code involved here than before, much of which is just boilerplate needed to be able to get a declaration of a value. Unfortunately, this boilerplate is fairly complex, so I would not classify this kind of code fix as easy.</p>
<p>This is what the boilerplate needed in Visual Studio to be able to get a declaration looks like, which I&rsquo;ve annotated to the best of my ability:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="c1">// Just setting up some values and doing a quick check
</span><span class="c1"></span><span class="k">let</span> <span class="nv">document</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Document</span>
<span class="k">do</span><span class="o">!</span> <span class="nn">Option</span><span class="p">.</span><span class="n">guard</span> <span class="o">(</span><span class="ow">not</span><span class="o">(</span><span class="n">isSignatureFile</span> <span class="n">document</span><span class="o">.</span><span class="n">FilePath</span><span class="o">))</span>
<span class="k">let</span> <span class="nv">checker</span> <span class="o">=</span> <span class="n">checkerProvider</span><span class="o">.</span><span class="n">Checker</span>

<span class="c1">// This is critical. Use the START of the diagnostic span
</span><span class="c1"></span><span class="k">let</span> <span class="nv">position</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Span</span><span class="o">.</span><span class="n">Start</span>

<span class="c1">// Accessing the data that we need to make certain API calls
</span><span class="c1"></span><span class="k">let!</span> <span class="nv">parsingOptions</span><span class="o">,</span> <span class="n">projectOptions</span> <span class="o">=</span> <span class="n">projectInfoManager</span><span class="o">.</span><span class="n">TryGetOptionsForEditingDocumentOrProject</span><span class="o">(</span><span class="n">document</span><span class="o">,</span> <span class="nn">CancellationToken</span><span class="p">.</span><span class="n">None</span><span class="o">,</span> <span class="n">userOpName</span><span class="o">)</span>
<span class="k">let!</span> <span class="nv">sourceText</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">GetTextAsync</span> <span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">liftTaskAsync</span>
<span class="k">let</span> <span class="nv">defines</span> <span class="o">=</span> <span class="nn">CompilerEnvironment</span><span class="p">.</span><span class="n">GetCompilationDefinesForEditing</span> <span class="n">parsingOptions</span>
<span class="k">let</span> <span class="nv">textLine</span> <span class="o">=</span> <span class="n">sourceText</span><span class="o">.</span><span class="n">Lines</span><span class="o">.</span><span class="n">GetLineFromPosition</span> <span class="n">position</span>
<span class="k">let</span> <span class="nv">textLinePos</span> <span class="o">=</span> <span class="n">sourceText</span><span class="o">.</span><span class="n">Lines</span><span class="o">.</span><span class="n">GetLinePosition</span> <span class="n">position</span>
<span class="k">let</span> <span class="nv">fcsTextLineNumber</span> <span class="o">=</span> <span class="nn">Line</span><span class="p">.</span><span class="n">fromZ</span> <span class="n">textLinePos</span><span class="o">.</span><span class="n">Line</span>

<span class="c1">// Parse and typecheck a document, getting results for the parsing and typechecking
</span><span class="c1"></span><span class="k">let!</span> <span class="nv">parseFileResults</span><span class="o">,</span> <span class="o">_,</span> <span class="n">checkFileResults</span> <span class="o">=</span> <span class="n">checker</span><span class="o">.</span><span class="n">ParseAndCheckDocument</span> <span class="o">(</span><span class="n">document</span><span class="o">,</span> <span class="n">projectOptions</span><span class="o">,</span> <span class="n">sourceText</span><span class="o">=</span><span class="n">sourceText</span><span class="o">,</span> <span class="n">userOpName</span><span class="o">=</span><span class="n">userOpName</span><span class="o">)</span>

<span class="c1">// Build a &#34;lexer symbol&#34; - this will quickly isolate the `x` from the rest of the expression and generate an F# SynExpr.Ident that can be used in other API calls
</span><span class="c1"></span><span class="k">let!</span> <span class="nv">lexerSymbol</span> <span class="o">=</span> <span class="nn">Tokenizer</span><span class="p">.</span><span class="n">getSymbolAtPosition</span> <span class="o">(</span><span class="n">document</span><span class="o">.</span><span class="n">Id</span><span class="o">,</span> <span class="n">sourceText</span><span class="o">,</span> <span class="n">position</span><span class="o">,</span> <span class="n">document</span><span class="o">.</span><span class="n">FilePath</span><span class="o">,</span> <span class="n">defines</span><span class="o">,</span> <span class="nn">SymbolLookupKind</span><span class="p">.</span><span class="n">Greedy</span><span class="o">,</span> <span class="k">false</span><span class="o">,</span> <span class="k">false</span><span class="o">)</span>

<span class="c1">// Finally, get the declaration of the symbol that a position corresponds to
</span><span class="c1"></span><span class="k">let</span> <span class="nv">decl</span> <span class="o">=</span> <span class="n">checkFileResults</span><span class="o">.</span><span class="n">GetDeclarationLocation</span> <span class="o">(</span><span class="n">fcsTextLineNumber</span><span class="o">,</span> <span class="n">lexerSymbol</span><span class="o">.</span><span class="n">Ident</span><span class="o">.</span><span class="n">idRange</span><span class="o">.</span><span class="n">EndColumn</span><span class="o">,</span> <span class="n">textLine</span><span class="o">.</span><span class="n">ToString</span><span class="bp">()</span><span class="o">,</span> <span class="n">lexerSymbol</span><span class="o">.</span><span class="n">FullIsland</span><span class="o">,</span> <span class="k">false</span><span class="o">)</span>
<span class="n">It&#39;s</span> <span class="n">quite</span> <span class="n">a</span> <span class="n">lot</span><span class="o">,</span> <span class="ow">and</span> <span class="n">we&#39;re</span> <span class="n">planning</span> <span class="n">on</span> <span class="n">finding</span> <span class="n">ways</span> <span class="k">to</span> <span class="n">improve</span> <span class="n">F</span><span class="o">#</span> <span class="n">compiler</span> <span class="n">service</span> <span class="n">APIs</span> <span class="k">to</span> <span class="n">make</span> <span class="n">this</span> <span class="n">kind</span> <span class="k">of</span> <span class="n">boilerplate</span> <span class="n">no</span> <span class="n">longer</span> <span class="n">necessary</span><span class="o">.</span>
</code></pre></div><p>Next, we&rsquo;ll also need to detect if the declaration is contained within a parameter or not. We&rsquo;ll need to also have an <code>FSharpParseFileResults</code> extension like before:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">open</span> <span class="nn">FSharp.Compiler</span>
<span class="k">open</span> <span class="nn">FSharp.Compiler.Text</span>
<span class="k">open</span> <span class="nn">FSharp.Compiler.Range</span>
<span class="k">open</span> <span class="nn">FSharp.Compiler.SourceCodeServices</span>

<span class="o">[&lt;</span><span class="n">AutoOpen</span><span class="o">&gt;]</span>
<span class="k">module</span> <span class="nn">ParseTreeExtensions</span> <span class="o">=</span>
    <span class="k">type</span> <span class="nc">FSharpParseFileResults</span> <span class="k">with</span>
        <span class="k">member</span> <span class="n">scope</span><span class="p">.</span><span class="nf">IsPositionContainedInACurriedParameter</span> <span class="n">pos</span> <span class="o">=</span>
            <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
            <span class="o">|</span> <span class="n">Some</span> <span class="n">input</span> <span class="o">-&gt;</span>
                <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span>
                    <span class="nn">AstTraversal</span><span class="p">.</span><span class="n">Traverse</span><span class="o">(</span><span class="n">pos</span><span class="o">,</span> <span class="n">input</span><span class="o">,</span> <span class="o">{</span> <span class="k">new</span> <span class="nn">AstTraversal</span><span class="p">.</span><span class="n">AstVisitorBase</span><span class="o">&lt;_&gt;</span><span class="bp">()</span> <span class="k">with</span> 
                        <span class="k">member</span> <span class="n">_</span><span class="p">.</span><span class="nf">VisitExpr</span><span class="o">(_</span><span class="n">path</span><span class="o">,</span> <span class="n">traverseSynExpr</span><span class="o">,</span> <span class="n">defaultTraverse</span><span class="o">,</span> <span class="n">expr</span><span class="o">)</span> <span class="o">=</span>
                            <span class="n">defaultTraverse</span><span class="o">(</span><span class="n">expr</span><span class="o">)</span>

                        <span class="k">override</span> <span class="n">_</span><span class="p">.</span><span class="nf">VisitBinding</span> <span class="o">(_,</span> <span class="n">binding</span><span class="o">)</span> <span class="o">=</span>
                            <span class="k">match</span> <span class="n">binding</span> <span class="k">with</span>
                            <span class="o">|</span> <span class="n">Binding</span><span class="o">(_,</span> <span class="o">_,</span> <span class="o">_,</span> <span class="o">_,</span> <span class="o">_,</span> <span class="o">_,</span> <span class="n">valData</span><span class="o">,</span> <span class="o">_,</span> <span class="o">_,</span> <span class="o">_,</span> <span class="n">range</span><span class="o">,</span> <span class="o">_)</span> <span class="k">when</span> <span class="n">rangeContainsPos</span> <span class="n">range</span> <span class="n">pos</span> <span class="o">-&gt;</span>
                                <span class="k">let</span> <span class="nv">info</span> <span class="o">=</span> <span class="n">valData</span><span class="o">.</span><span class="n">SynValInfo</span><span class="o">.</span><span class="n">CurriedArgInfos</span>
                                <span class="k">let</span> <span class="nv">mutable</span> <span class="n">found</span> <span class="o">=</span> <span class="k">false</span>
                                <span class="k">for</span> <span class="n">group</span> <span class="k">in</span> <span class="n">info</span> <span class="k">do</span>
                                    <span class="k">for</span> <span class="n">arg</span> <span class="k">in</span> <span class="n">group</span> <span class="k">do</span>
                                        <span class="k">match</span> <span class="n">arg</span><span class="o">.</span><span class="n">Ident</span> <span class="k">with</span>
                                        <span class="o">|</span> <span class="n">Some</span> <span class="n">ident</span> <span class="k">when</span> <span class="n">rangeContainsPos</span> <span class="n">ident</span><span class="o">.</span><span class="n">idRange</span> <span class="n">pos</span> <span class="o">-&gt;</span>
                                            <span class="n">found</span> <span class="o">&lt;-</span> <span class="k">true</span>
                                        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">()</span>
                                <span class="k">if</span> <span class="n">found</span> <span class="k">then</span> <span class="n">Some</span> <span class="n">range</span> <span class="k">else</span> <span class="n">None</span>
                            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
                                <span class="n">None</span>
                    <span class="o">})</span>
                <span class="n">result</span><span class="o">.</span><span class="n">IsSome</span>
            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="k">false</span>
</code></pre></div><p>In this case, we just use <code>defaultTraverse</code> for any arbitary <code>SynExpr</code>, but we override the <code>VisitBinding</code> member. <code>VisitBinding</code> traverses a <code>SynExpr.Binding</code>, which is typicall a let binding. We need to then inspect data called <code>valData</code>, which contains a list of all curried parameter definitions for the binding, if they exist. We then loop through each and detect if the given position is within the range of one of the defined parameter bindings. For example, consider the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">f</span> <span class="o">(</span><span class="n">x</span><span class="o">:</span> <span class="n">int</span><span class="o">)</span> <span class="o">(</span><span class="n">y</span><span class="o">:</span> <span class="n">int</span><span class="o">)</span> <span class="o">=</span>
    <span class="n">x</span> <span class="o">&lt;-</span> <span class="n">12</span> <span class="c1">// Error
</span><span class="c1"></span>    <span class="n">y</span>
</code></pre></div><p>This code will result in <code>x</code> being defined as a parameter. So we can pass the start position of its range to the tree traversal, which will then loop through each parameter until it finds the <code>x</code> definition. It will verify that the range of <code>x</code> contains the position we&rsquo;re after, return true, and then we&rsquo;ll know that <code>x</code> is defined as a parameter!</p>
<p>Putting it all together looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="k">namespace</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">VisualStudio</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="n">Editor</span>

<span class="k">open</span> <span class="nn">System.Composition</span>
<span class="k">open</span> <span class="nn">System.Threading</span>
<span class="k">open</span> <span class="nn">System.Threading.Tasks</span>

<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.Text</span>
<span class="k">open</span> <span class="nn">Microsoft.CodeAnalysis.CodeFixes</span>

<span class="k">open</span> <span class="nn">FSharp.Compiler.Range</span>
<span class="k">open</span> <span class="nn">FSharp.Compiler.SourceCodeServices</span>
<span class="k">open</span> <span class="nn">FSharp.Compiler.AbstractIL.Internal.Library</span>

<span class="o">[&lt;</span><span class="n">ExportCodeFixProvider</span><span class="o">(</span><span class="nn">FSharpConstants</span><span class="p">.</span><span class="n">FSharpLanguageName</span><span class="o">,</span> <span class="n">Name</span> <span class="o">=</span> <span class="s">&#34;MakeDeclarationMutable&#34;</span><span class="o">);</span> <span class="n">Shared</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">internal</span> <span class="n">FSharpMakeDeclarationMutableFixProvider</span>
    <span class="o">[&lt;</span><span class="n">ImportingConstructor</span><span class="o">&gt;]</span>
    <span class="o">(</span>
        <span class="n">checkerProvider</span><span class="o">:</span> <span class="n">FSharpCheckerProvider</span><span class="o">,</span> 
        <span class="n">projectInfoManager</span><span class="o">:</span> <span class="n">FSharpProjectOptionsManager</span>
    <span class="o">)</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="n">CodeFixProvider</span><span class="bp">()</span>

    <span class="k">static</span> <span class="k">let</span> <span class="nv">userOpName</span> <span class="o">=</span> <span class="s">&#34;MakeDeclarationMutable&#34;</span>

    <span class="k">let</span> <span class="nv">fixableDiagnosticIds</span> <span class="o">=</span> <span class="n">set</span> <span class="o">[</span><span class="s">&#34;FS0027&#34;</span><span class="o">]</span>

    <span class="k">override</span> <span class="n">_</span><span class="p">.</span><span class="nf">FixableDiagnosticIds</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span> <span class="n">fixableDiagnosticIds</span>

    <span class="k">override</span> <span class="n">_</span><span class="p">.</span><span class="nf">RegisterCodeFixesAsync</span> <span class="n">context</span> <span class="o">:</span> <span class="n">Task</span> <span class="o">=</span>
        <span class="n">asyncMaybe</span> <span class="o">{</span>
            <span class="k">let</span> <span class="nv">diagnostics</span> <span class="o">=</span>
                <span class="n">context</span><span class="o">.</span><span class="n">Diagnostics</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">fixableDiagnosticIds</span> <span class="o">|&gt;</span> <span class="nn">Set</span><span class="p">.</span><span class="n">contains</span> <span class="n">x</span><span class="o">.</span><span class="n">Id</span><span class="o">)</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toImmutableArray</span>

            <span class="k">let</span> <span class="nv">document</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Document</span>
            <span class="k">do</span><span class="o">!</span> <span class="nn">Option</span><span class="p">.</span><span class="n">guard</span> <span class="o">(</span><span class="ow">not</span><span class="o">(</span><span class="n">isSignatureFile</span> <span class="n">document</span><span class="o">.</span><span class="n">FilePath</span><span class="o">))</span>
            <span class="k">let</span> <span class="nv">position</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Span</span><span class="o">.</span><span class="n">Start</span>
            <span class="k">let</span> <span class="nv">checker</span> <span class="o">=</span> <span class="n">checkerProvider</span><span class="o">.</span><span class="n">Checker</span>
            <span class="k">let!</span> <span class="nv">parsingOptions</span><span class="o">,</span> <span class="n">projectOptions</span> <span class="o">=</span> <span class="n">projectInfoManager</span><span class="o">.</span><span class="n">TryGetOptionsForEditingDocumentOrProject</span><span class="o">(</span><span class="n">document</span><span class="o">,</span> <span class="nn">CancellationToken</span><span class="p">.</span><span class="n">None</span><span class="o">,</span> <span class="n">userOpName</span><span class="o">)</span>
            <span class="k">let!</span> <span class="nv">sourceText</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">GetTextAsync</span> <span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">liftTaskAsync</span>
            <span class="k">let</span> <span class="nv">defines</span> <span class="o">=</span> <span class="nn">CompilerEnvironment</span><span class="p">.</span><span class="n">GetCompilationDefinesForEditing</span> <span class="n">parsingOptions</span>
            <span class="k">let</span> <span class="nv">textLine</span> <span class="o">=</span> <span class="n">sourceText</span><span class="o">.</span><span class="n">Lines</span><span class="o">.</span><span class="n">GetLineFromPosition</span> <span class="n">position</span>
            <span class="k">let</span> <span class="nv">textLinePos</span> <span class="o">=</span> <span class="n">sourceText</span><span class="o">.</span><span class="n">Lines</span><span class="o">.</span><span class="n">GetLinePosition</span> <span class="n">position</span>
            <span class="k">let</span> <span class="nv">fcsTextLineNumber</span> <span class="o">=</span> <span class="nn">Line</span><span class="p">.</span><span class="n">fromZ</span> <span class="n">textLinePos</span><span class="o">.</span><span class="n">Line</span>
            <span class="k">let!</span> <span class="nv">parseFileResults</span><span class="o">,</span> <span class="o">_,</span> <span class="n">checkFileResults</span> <span class="o">=</span> <span class="n">checker</span><span class="o">.</span><span class="n">ParseAndCheckDocument</span> <span class="o">(</span><span class="n">document</span><span class="o">,</span> <span class="n">projectOptions</span><span class="o">,</span> <span class="n">sourceText</span><span class="o">=</span><span class="n">sourceText</span><span class="o">,</span> <span class="n">userOpName</span><span class="o">=</span><span class="n">userOpName</span><span class="o">)</span>
            <span class="k">let!</span> <span class="nv">lexerSymbol</span> <span class="o">=</span> <span class="nn">Tokenizer</span><span class="p">.</span><span class="n">getSymbolAtPosition</span> <span class="o">(</span><span class="n">document</span><span class="o">.</span><span class="n">Id</span><span class="o">,</span> <span class="n">sourceText</span><span class="o">,</span> <span class="n">position</span><span class="o">,</span> <span class="n">document</span><span class="o">.</span><span class="n">FilePath</span><span class="o">,</span> <span class="n">defines</span><span class="o">,</span> <span class="nn">SymbolLookupKind</span><span class="p">.</span><span class="n">Greedy</span><span class="o">,</span> <span class="k">false</span><span class="o">,</span> <span class="k">false</span><span class="o">)</span>
            <span class="k">let</span> <span class="nv">decl</span> <span class="o">=</span> <span class="n">checkFileResults</span><span class="o">.</span><span class="n">GetDeclarationLocation</span> <span class="o">(</span><span class="n">fcsTextLineNumber</span><span class="o">,</span> <span class="n">lexerSymbol</span><span class="o">.</span><span class="n">Ident</span><span class="o">.</span><span class="n">idRange</span><span class="o">.</span><span class="n">EndColumn</span><span class="o">,</span> <span class="n">textLine</span><span class="o">.</span><span class="n">ToString</span><span class="bp">()</span><span class="o">,</span> <span class="n">lexerSymbol</span><span class="o">.</span><span class="n">FullIsland</span><span class="o">,</span> <span class="k">false</span><span class="o">)</span>

            <span class="k">match</span> <span class="n">decl</span> <span class="k">with</span>
            <span class="c1">// Only do this for symbols in the same file. That covers almost all cases anyways.
</span><span class="c1"></span>            <span class="c1">// We really shouldn&#39;t encourage making values mutable outside of local scopes anyways.
</span><span class="c1"></span>            <span class="o">|</span> <span class="nn">FSharpFindDeclResult</span><span class="p">.</span><span class="n">DeclFound</span> <span class="n">declRange</span> <span class="k">when</span> <span class="n">declRange</span><span class="o">.</span><span class="n">FileName</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">FilePath</span> <span class="o">-&gt;</span>
                <span class="k">let!</span> <span class="nv">span</span> <span class="o">=</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">TryFSharpRangeToTextSpan</span><span class="o">(</span><span class="n">sourceText</span><span class="o">,</span> <span class="n">declRange</span><span class="o">)</span>

                <span class="c1">// Bail if it&#39;s a parameter, because like, that ain&#39;t allowed
</span><span class="c1"></span>                <span class="k">do</span><span class="o">!</span> <span class="nn">Option</span><span class="p">.</span><span class="n">guard</span> <span class="o">(</span><span class="ow">not</span> <span class="o">(</span><span class="n">parseFileResults</span><span class="o">.</span><span class="n">IsPositionContainedInACurriedParameter</span> <span class="n">declRange</span><span class="o">.</span><span class="n">Start</span><span class="o">))</span>

                <span class="k">let</span> <span class="nv">title</span> <span class="o">=</span> <span class="nn">SR</span><span class="p">.</span><span class="n">MakeDeclarationMutable</span><span class="bp">()</span>
                <span class="k">let</span> <span class="nv">codeFix</span> <span class="o">=</span>
                    <span class="nn">CodeFixHelpers</span><span class="p">.</span><span class="n">createTextChangeCodeFix</span><span class="o">(</span>
                        <span class="n">title</span><span class="o">,</span>
                        <span class="n">context</span><span class="o">,</span>
                        <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">asyncMaybe</span><span class="o">.</span><span class="n">Return</span> <span class="o">[|</span> <span class="n">TextChange</span><span class="o">(</span><span class="n">TextSpan</span><span class="o">(</span><span class="n">span</span><span class="o">.</span><span class="n">Start</span><span class="o">,</span> <span class="n">0</span><span class="o">),</span> <span class="s">&#34;mutable &#34;</span><span class="o">)</span> <span class="o">|]))</span>

                <span class="n">context</span><span class="o">.</span><span class="n">RegisterCodeFix</span><span class="o">(</span><span class="n">codeFix</span><span class="o">,</span> <span class="n">diagnostics</span><span class="o">)</span>
            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
                <span class="bp">()</span>
        <span class="o">}</span>
        <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="n">Ignore</span>
        <span class="o">|&gt;</span> <span class="nn">RoslynHelpers</span><span class="p">.</span><span class="n">StartAsyncUnitAsTask</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">CancellationToken</span><span class="o">)</span>
</code></pre></div><p>And that&rsquo;s it!</p>



<div class="gblog-post__anchorwrap">
    <h2 id="contribute-your-own-code-fixer">
        Contribute your own code fixer
        <a data-clipboard-text="https://phillipcarter.dev/posts/how-to-make-an-fsharp-code-fixer/#contribute-your-own-code-fixer" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Contribute your own code fixer" href="#contribute-your-own-code-fixer">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>If you&rsquo;ve made it this far, you should be armed to add all kinds of code fixers. There is actually another class of fixer that I can discuss in another blog post, where we pair a code analyzer that raises custom diagnostics with a fixer that acts on those diagnostics. But the contents of this post should be enough to add lots of different kinds of fixers.</p>
<p>If you want to add one to Visual Studio, check out the fixers in the CodeFix folder. You can copy/paste one into a new file and change stuff as you go. Syntax tree extensions are typically moved into the F# compiler API itself, and with corresponding unit tests. But we can help you get that stuff added correctly during code review.</p>
<p>If you want to add one to VSCode, check out the CodeFixes file and take a look at the variety of code fixers available there and add a new one. I advise looking through the git history of the file to see where various helpers, such as syntax tree extensions, are located.</p>
<p>Happy code fixing!</p>
]]></content><category scheme="https://phillipcarter.dev/tags/fsharp" term="fsharp" label="fsharp"/><category scheme="https://phillipcarter.dev/tags/visual-studio" term="visual-studio" label="Visual Studio"/></entry><entry><title type="html">5 years at Microsoft</title><link href="https://phillipcarter.dev/posts/five-years-at-microsoft/?utm_source=atom_feed" rel="alternate" type="text/html" hreflang="en"/><id>https://phillipcarter.dev/posts/five-years-at-microsoft/</id><published>2020-07-16T00:00:00+00:00</published><updated>2021-02-28T18:06:09-08:00</updated><content type="html"><![CDATA[<p>As of the time of writing (2020-06-06), I will have been employed at Microsoft for 5 years. I joined the .NET team when I was 24 years old. Now at 29, I&rsquo;m still here and thoroughly enjoying it. It&rsquo;s been a great time overall. I&rsquo;ve learned so much more than I ever would have imagined, met so many wonderful people, and helped make some things that people enjoy. Here&rsquo;s what I remember the most in those years.</p>
<p>This turned out to be long. Sorry about that!</p>



<div class="gblog-post__anchorwrap">
    <h2 id="preamble-college-and-pre-microsoft">
        Preamble: college and pre-Microsoft
        <a data-clipboard-text="https://phillipcarter.dev/posts/five-years-at-microsoft/#preamble-college-and-pre-microsoft" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Preamble: college and pre-Microsoft" href="#preamble-college-and-pre-microsoft">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>It would be silly of me to not reflect on the things that led to my job at Microsoft, so I figured I&rsquo;d write about them a bit.</p>
<p>I graduated from college on June 15th, 2015. It took some time to get there. I was a privileged dipshit coming out of high school and I was lucky to have family who chose to support me as I failed college courses and ultimately went back home to continue playing WoW competitively. My dad told me at one point that I was privileged and lucky compared to so many other kids in the world, and it was insulting that I&rsquo;d waste the opportunities I lucked into in life. My mom didn&rsquo;t say that, but I know she felt the same way. This is easily the part of my life that I&rsquo;m least proud of. Not just on a personal level, but because the entire time I was wasting life in a college dorm playing games, someone who deserved to be there could have been studying and pursuing an opportunity I&rsquo;d effectively robbed them of. It took a few years to understand that.</p>
<p>In retrospect, my dad was cool for letting me live at his house rent-free while I went to a community college to try and figure stuff out. Despite not having to pay rent or for food at home, I had to find a job - not an easy task post-2008 financial crisis with no actual skills - and figure out my own transportation to/from school and work. I eventually got a job at my stepdad&rsquo;s pet store earning 8 dollars per hour, which was enough to cover gas to drive to/from work and buy myself some food here and there.</p>
<p>Life from that point was simple:</p>
<p>Ride the bus for 2.5 hours every weekday to go to class (I lived far away from campus)
Eat food at my mom&rsquo;s or my dad&rsquo;s house for free
Work on weekends and some weekdays if I could afford it
Do homework
Somewhere along the line, I got an android phone for my birthday and learned how to build apps for it. I built a scientific calculator that could parse arbitrary mathematical expressions in my spare time (at the expense of some homework), which I think marks the time when I learned that software engineering was for me.</p>
<p>Eventually I transferred to Oregon State University and began life as a student living off student loans. After a month, I got a job writing .NET code for the university for 20 hours a week during the school year, and 40 hours a week during summer/spring/winter break. Life here was straightforward: lots of school, lots of homework, lots of work, and more money than I&rsquo;ve ever earned before (a whole 12 dollars per hour).</p>
<p>My senior year was kind of terrifying. I had an amazing girlfriend (who is now my amazing wife), did well in classes, and I had become a mentor for other students at my work. But I had no job prospects. I submitted job applications every single evening for months but heard nothing back. During the winter term career fair, Microsoft had some folks at a booth (which I understood was a rarity). I showed them a mobile app I built that tracked buses in the city in real-time, which evidently impressed them enough to get me an interview. Lots of stress and studying later, I eventually interviewed on campus at Microsoft. I was pulled aside for an extra lunch-time interview and given a pitch on being a technical PM, which was compelling to me. The next day I got an offer and considering that I had no other offers nor interviews lined up at all, I took it immediately and without negotiation.</p>
<p>My perspective on this was that I got lucky. Lucky that I existed in an environment where Microsoft showed up, lucky that my app seemed compelling, and lucky that I had good interviewers who didn&rsquo;t feel like torturing candidates. I became determined to prove that I wasn&rsquo;t some fluke who slipped into the system by accident, so I spent the rest of the year learning as much as I could about various software engineering practices and the PM discipline.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="first-year---2015-2016---work-life-is-very-different">
        First year - 2015-2016 - work life is very different
        <a data-clipboard-text="https://phillipcarter.dev/posts/five-years-at-microsoft/#first-year---2015-2016---work-life-is-very-different" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor First year - 2015-2016 - work life is very different" href="#first-year---2015-2016---work-life-is-very-different">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>I&rsquo;ll be honest, my first year wasn&rsquo;t very good. The cash Microsoft offered me to help with moving emptied out really quickly after buying some basic furniture, an apartment rental (they are very expensive here), food, and bus fares (the Microsoft &ldquo;bus card&rdquo; wasn&rsquo;t ready for me until like a month for some reason). I didn&rsquo;t have a car, and I was also happy about that because cars are expensive. I was told that we get paid twice a month, but since practically nothing had &ldquo;flowed through the system&rdquo; for me, I wasn&rsquo;t convinced that would happen. In hindsight it was irrational of me to doubt that I&rsquo;d get paid, but I could only afford living in the Bellevue-Redmond region for the remainder of the month, so that weighed heavily in my mind. In those first two weeks, I was focused primarily on wondering what to do all day at work and wondering if I&rsquo;d have to live in my office after failing to pay the next month&rsquo;s rent. I was extremely happy to have been paid when they told me it would happen.</p>
<p>Side note: this brief period of my life is just a small taste of the kind of stress that millions of Americans go through every day. Throughout college and during this time, I would read elitist things some of the things people in tech (often those in the bay area) would say about poor or homeless people online. If you are in tech and feel that poor people do &ldquo;irrational&rdquo; things or should just &ldquo;practice better personal responsibility&rdquo;, please exercise some tiny effort and google the topic before expressing your useless opinions online.</p>
<p>Ahem.</p>
<p>During that first month, my time at Microsoft during the day was confusing and boring. On the first day we had to go to New Employee Orientation, where we got a presentation on some stuff and free lunch. Some guy from marketing named Bryan wouldn&rsquo;t stop going on and on about how much he loved Microsoft, and although I appreciated his enthusiasm I think it had the opposite effect on me. The presentation felt more like a sales pitch than an actual orientation. Whatever. After orientation we were supposed to meet our managers, but mine never showed up. Me and about about 5 other people whose managers weren&rsquo;t there got some lunch together. I then went to the help desk to verify my manager&rsquo;s email (I had his name on a little piece of paper), how I could get my ID, and what I should do the next day. I got the contact info confirmed and emailed my manager from my personal email when I got home.</p>
<p>I didn&rsquo;t realize it at the time, but my manager was already on his way out of the company and clearly didn&rsquo;t care about what I did or what I worked on. I was told I would investigate &ldquo;.NET Native and UWP&rdquo; but had no idea what to actually do, so I built a UWP clone of the android app I wrote in college. I was transferred to another manager before my current one left for vacation, which apparently was a code word for &ldquo;I&rsquo;m just fucking leaving&rdquo; because he never returned when he said he would.</p>
<p>For a while during my first year, I eventually felt that nobody on my team had really planned for me to be there. Nobody who I interviewed with was a part of the org I was in, so I must have just been placed there randomly. At the time, it was typically interns and people the team knew from industry who were hired into the .NET PM org. Since I was neither, I definitely felt out of place. My manager at the time helped guide me towards improving documentation, where I eventually befriended a few people and had some legitimate work to do. The docs team was completely underwater at the time, so they were thankful for anyone who could help them document .NET Core 1.0 concepts.</p>
<p>I remember during September people were talking about &ldquo;Connects&rdquo; and bonuses and stuff. I had no idea what that was and why they were talking about it. Maybe it was because I had only been on the team for a few months, but the lack of any conversation during that time felt like I was just along for the ride rather than a part of any team.</p>
<p>Until April of the next year, I was primarily a documentation writer and occaisonally talked about product stuff with other members of my team mostly just to learn things. My manager at the time pointed out some of my work to our director that he that he thought was good, which I appreciated a lot.</p>
<p>That April is when things changed a lot. The PM who had been responsible for the F# tools for Visual Studio was on my immediate team and he was leaving. Since I liked F#, used it in college for fun, and even wrote some docs with F# examples, he recommended that I fill the position. So I took it, partly because I really liked F# as a language, but mostly because I wanted to do something related to product development rather than chasing people around trying to learn how to document the things they were building. I was so completely in over my head, but luckily folks like Kevin Ransom and Don Syme were patient and gracious and accommodating of my inexperience.</p>
<p>I spent the next few months primarily focused on learning the F# language. I already knew it a bit and used it to build a bespoke DSL and parser that integrated with a larger codebase, so it wasn&rsquo;t like I was starting from scratch. But my PM peers for VB.NET and C# were (and still are) quite literally world experts in the languages they were responsible for. When your peers are the top of their respective fields in the entire planet, it&rsquo;s hard not to feel a little in over your own head. However, the pressure I felt was entirely self-created because everyone around me was supportive and treated me just how they&rsquo;d like to be treated. This was a good (if intense) couple of months where I learned a lot.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="second-year---2016-2017---things-can-be-exciting-but-hard">
        Second year - 2016-2017 - things can be exciting (but hard)
        <a data-clipboard-text="https://phillipcarter.dev/posts/five-years-at-microsoft/#second-year---2016-2017---things-can-be-exciting-but-hard" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Second year - 2016-2017 - things can be exciting (but hard)" href="#second-year---2016-2017---things-can-be-exciting-but-hard">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>My second year couldn&rsquo;t have been any different from the first. I was now the PM for the F# tools for Visual Studio, and my scope had immediately increased beyond that:</p>
<p>Are we going to ship a new version of the F# language?
We can only afford to make F# work well on .NET Core or .NET Native. Which do we pick?
Additionally, I was added to a division-wide project to re-design and build the system by which Visual Studio acquires and installs components on a machine. Prior to Visual Studio 2017, acquisition and installation was the highest cause of failures for the product and the largest source of customer dissatisfaction. This was an extremely ambitious effort that required nearly every team to refactor their tooling components into manageable pieces that could be logically grouped together. I was made into one of the &ldquo;owners&rdquo; for .NET components and responsible for delivering the smallest possible set of components that could be reasonably used together to build .NET applications.</p>
<p>Going from practically no responsibility to &ldquo;owning&rdquo; the future of a programming language and being responsible for the way the largest cohort of Visual Studio users installs things was a whirlwind. Luckily, I had some amazing folks to work with who helped and trusted me in the following months:</p>
<p>Andrew Hall - my manager, also co-&ldquo;owner&rdquo; of another installation scenario
Kevin Ransom - my friend and developer counterpart for F#, whose experience I rely on to this day
Don Syme - creator of F# and ultimate example of patience and kindness
Anthony D. Green - my friend and officemate, master of VB.NET and guru of developer experiences
Jonathon Marolf - my friend and developer counterpart who knew (and still knows) how everything in VS works
Kasey Uhlenhuth - my friend and teammate, responsible for C# IDE experiences and master of telemetry
The Summer of 2016 was spent mostly learning, emailing, writing F# code, and slowly but steadily reducing the payload .NET developers had to download when installing Visual Studio from a minimum of 10GB to a minimum of 2.3GB. This included Visual Studio itself, .NET Framework developer packs most people used, desktop frameworks, compilers, tooling, NuGet, MSBuild, .NET Core SDK, the Portable Class Library developer pack, and more. Frustratingly, F# was not installed by default and this was something I couldn&rsquo;t control because inclusion was determined by telemetry, and F# didn&rsquo;t have enough users at the time, nor was it a part of a required component.</p>
<p>That Summer I also worked with others to ultimately focus F# on .NET Core instead of .NET Native. The reasoning was twofold:</p>
<p>We believed that the long-term future of F# was cross-platform and open source, and .NET Native was not (and still is not) either of those things.
.NET Core is a means of independence for .NET (and by extension, F#). Not being tied to Windows and the internal politics of development platforms for Windows coming and going meant less throwaway work in the short-term and long-term for the people who maintain and evolve F# at Microsoft.
This was a very hard call to make, because at the time .NET Core really sucked for most .NET developers. .NET Native wasn&rsquo;t that much better, but there was (at the time) a clearer short-term vision for it and an application platform that existed and served a purpose via UWP. I&rsquo;m happy that it appears to have been the right decision 4 years later.</p>
<p>Later that year I was faced with an even more challenging situation. The development team F# was a part of is centered around the Roslyn project, where the C# and VB IDE teams united and built brand-new compilers and Visual Studio tooling. The Visual Studio tooling was not just features for C#, but massive amounts of language-agnostic infrastructure that TypeScript and XAML tools had successfully adopted.</p>
<p>It was decided that F# tooling would also use this infrastructure. At the time, F# language integration in Visual Studio was extremely complex and almost impossible to evolve unless you were a seasoned Microsoft employee. It was stable, but the amount of work needed to add .NET Core tooling support dwarfed the work that it would take to integrate with the language-agnostic infrastructure that the Roslyn team had built. That same infrastructure was the basis for all .NET Core tooling support for C# and would steadily improve over time, so F# would get many things &ldquo;for free&rdquo; in the long term if we adopted it.</p>
<p>Thus, this work was started and moved along quite well. Unfortunately, the developer who worked on it had already planned to move to another team and it was decided that his work needed to be merged for fear that it would bit-rot indefinitely. This was a very controversial call, because the integration was very much incomplete but merged and shipped with the first Release Candidate of VS 2017. Although it had good foundations, it unsettled so many experiences and had huge gaps that were obvious within just a few moments of using F# with an existing codebase. To make matters worse, the F# infrastructure had to change a lot to accomodate the installation changes being made. The build was also in a terrible state: it would take a day or more to produce a build of the compiler and tools that could feasibly be integrated into Visual Studio. In practice, maybe 50% of those builds were actually successful and could get integrated. With many features significantly regressed and the team unable to reliably produce new builds where issues were fixed, F# tooling for Visual Studio was arguably in its worst state ever in those first RCs of VS 2017. Fun times.</p>
<p>Internally, we were completely focused on ensuring our setup infrastructure was sound for VS 2017 and improving the F# build infrastructure because the single worst thing you can have is a product that cannot reliably build itself. This took months to resolve. In that time, we were incredibly lucky to have an active OSS community fix numerous problems with the tooling integration and even add a handful of new features ported over from the community project, F# Power Tools for VS. Don Syme, Vasily Kirichenko, Steffen Forkmann, Saul Rennison, Ahn-Dung Phan, Jared Hester, Vladimir Matveev, and Robert Jeppesen submitted a storm of pull requests in the coming months, and all we had time to do was to pull them down, test them out, and merge them if they worked. Eventually, their incredibly hard work combined with our success in getting a reliable F# build meant that F# tooling could exist in VS 2017 alongside a brand-new F# language version (F# 4.1).</p>
<p>2016 was an exciting and challenging year that unfortunately got pretty bad for F# users of Visual Studio near the end. Yes, they got a new language version (still preview at the time) and some new tooling features they&rsquo;d never had before. But it would take well over a year before most F# users could enjoy F# tooling in VS again, and longer for others. In hindsight, I think it would have been possible to freeze existing F# tooling, shelve the Roslyn integration work and reprioritize the limited resources we had towards completing it incrementally, ship it as off-by-default and build infrastructure to allow for turning it on as a preview feature, and roll it out at an &ldquo;appropriate&rdquo; time. But this kind of plan would have been extremely difficult to actually execute on and is the sort of thing that only senior-level PMs at Microsoft can usually do. I don&rsquo;t believe I would have been able to lead such an effort successfully, especially considering there was no support for properly shipping and loading experimental versions of Visual Studio tooling at the time. Some kind of infrastructure for that would need to have been built, which also would have been very difficult and time-consuming. Given all of this, I&rsquo;m fairly positive that we never would have had support for F# and .NET Core projects in Visual Studio had we tried to take this route.</p>
<p>The beginning of 2017 was much like the end of 2016: testing contributions from the F# OSS community, reviewing pull requests, fixing issues, and preparing for the release of VS 2017. Due to the efforts of F# contributors, the tooling support was usable for some codebases (though not all&hellip;) and despite its flaws could exist in the product and reliably be updated.</p>
<p>I then got to draft a blog post announcing F# 4.1 and its feature set (which I frankly was not terribly involved in) and the updated F# tools for Visual Studio, which at this point had accumulated a lot of new features compared to previous versions.</p>
<p>In the months following the initial release, things didn&rsquo;t go too well from a product quality standpoint. More people installed it and filed more bugs, and it was apparent that things were nowhere near the expectations people had. A lot of people have avoided to previews altogether, and it turns out there were more gaps than were identified at that time. But not all was bad: bugs were fixed, features were adjusted, and we got new contributors regularly. We were even able to roll out a &ldquo;nightly&rdquo; feed where you could install whatever was merged into the main branch on GitHub 24 hours ago on your own machine. Because the F# codebase evolved more rapidly than the F# release in Visual Studio, and there were many bugs fixed in place but not yet shipping in Visual Studio, lots of F# users installed these nightly releases because they were a significant upgrade.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="third-year---2017-2018---finding-my-identity">
        Third year - 2017-2018 - finding my identity
        <a data-clipboard-text="https://phillipcarter.dev/posts/five-years-at-microsoft/#third-year---2017-2018---finding-my-identity" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Third year - 2017-2018 - finding my identity" href="#third-year---2017-2018---finding-my-identity">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>The beginning of my third year at Microsoft was spent mostly working on F# support in VS 2017, especially in the first half. Although I don&rsquo;t like how it happened, one positive outcome was a significant uptick in OSS activity. Some of the goals of integrating with Roslyn tooling were paying off from a technical standpoint, because it was actually feasible for anyone to add new features or improve existing ones. Well, that is if they were willing to pay the cost of an awful and error-prone first-time setup process for contributing to the repository. Our infrastructure may have improved, but it had a long way to go, especially for code contributions.</p>
<p>In addition to spending enormous amounts of time continually reviewing code, testing things, and even submitting some fixes of my own, there were also a few of bugs introduced by F# 4.1 that had to gradually be fixed. It was clear to myself and the engineering management around me that we needed to get more people on the team to get on top of the bugs and stabilize things. However, budgets were tight and adding another engineer to the F# team meant not adding one to another team.</p>
<p>What a lot of people on the outside don&rsquo;t understand is that at large companies, there isn&rsquo;t some giant bucket of money any arbitrary team can just take as much as they want from. Most teams at Microsoft have big ambitions and if they could just take as much money as they wanted, the company would go bankrupt within a year. Individual divisions have their own budgets to balance, and that is also true for engineering groups within those divisions. The F# compiler and tools (if you consider VS Community) are 100% free and open source. We don&rsquo;t directly contribute to any revenue figures. We do have an impact, but it&rsquo;s impossible to measure because we don&rsquo;t track our users obsessively like Google or Facebook does. Teams in my working group are not particularly large, and we all do a lot more than most people think we do.</p>
<p>In light of this, I spent some time reasonably estimating how much money F# as product brought into Microsoft and I was able to help the management folks who already wanted to increase the size of the team, but just needed some &ldquo;ammunition&rdquo;. This was the first time I&rsquo;d ever had to grasp the complexity of a compiler, language tooling, OSS ecosystem, and business processes and it was extremely hard. I was stressed and overhwhelmed.</p>
<p>Another new thing happened in the Spring of 2017: I was invited to give a keynote at <a class="gblog-post__link" href="https://skillsmatter.com/conferences/8053-f-sharp-exchange-2017">F# eXchange</a>
, a commercial conference focused on F# developers in Europe. I was nervous and frightened: &ldquo;Hello everyone, I&rsquo;m the new and inexperienced person who fucked up your IDE and colluded in some bugs being shipped, please listen to what I have to say&rdquo;. Despite being a little spooked, I practiced my talk with my manager, got on a plane to London, and took some trains to Cambridge to meet with some F# users who were going to attend a meetup there that evening.</p>
<p>The F# community is filled to the brim with kind, intelligent, and welcoming people. Sleep-deprived and in a country I&rsquo;d never been in before, I definitely didn&rsquo;t expect to be greeted so warmly by <a class="gblog-post__link" href="https://twitter.com/k_cieslak">Krzysztof Cieślak</a>
 and <a class="gblog-post__link" href="https://twitter.com/MarkRGray">Mark Gray</a>
, then later <a class="gblog-post__link" href="https://twitter.com/tomaspetricek">Tomas Petricek</a>
 and <a class="gblog-post__link" href="https://twitter.com/evelgab">Evelina Gabasova</a>
. This was but a taste of the many friends I would make over the years.</p>
<p>The week I spend in the UK at the conference and among new friends was unforgettable. Dinners and drinks across London with (now) friends at <a class="gblog-post__link" href="https://www.gresearch.co.uk/">G-Research</a>
, exploring Cambridge, accidentally booking a hotel for the wrong month and having the gracious staff put me up in an empty room at no cost while I got my true lodging sorted, and countless hours spent with new friends who all shared in our passion for the F# language and its community. I can&rsquo;t name them all right now, but some of those I spent the most time with include <a class="gblog-post__link" href="https://twitter.com/alfonsogcnunez">Alfonso Garcia-Caro</a>
, <a class="gblog-post__link" href="https://twitter.com/enricosada">Enrico Sada</a>
, <a class="gblog-post__link" href="https://twitter.com/selketjah">Gien Versatche</a>
, <a class="gblog-post__link" href="https://twitter.com/ScottWlaschin">Scott Wlaschin</a>
, <a class="gblog-post__link" href="https://twitter.com/isaac_abraham">Isaac Abraham</a>
, and <a class="gblog-post__link" href="https://twitter.com/brandewinder">Mathias Brandewinder</a>
. They&rsquo;re all welcome to stay in my home any time they&rsquo;re in the Pacific Northwest.</p>
<p>Once back, Spring went by quickly with more of the same work as before. I helped handle surges of tooling improvement contributions and get bugs fixed. I also started to take on F# documentation and helped move the F# language reference and tutorials to the <a class="gblog-post__link" href="https://phillipcarter.dev/posts/docs.microsoft.com/dotnet/fsharp">new documentation site</a>
.</p>
<p>In the Summer of 2017, we made a strategic call that may have been the most important thing to happen for F# in a long time: changing the .NET SDK to include F# by default with .NET core. Prior to this point, the F# integration into .NET Core was via a component built by the F# community that packaged our .NET Core compiler into a component that could optionally be brought into a project. This worked fine in the early days of F# support for .NET Core, but as our support stabilized, we needed to be &ldquo;in the box&rdquo;. Additionally, this would allow F# to be installed by default for anyone installing .NET with Visual Studio, since Visual Studio required .NET Core and .NET Core now required F#. To this day, getting started with F# on any OS is trivial: just install .NET Core and create and F# project. If you install .NET, you get F#. End of story.</p>
<p>With the new year, I also got a new responsibility. My boss was the primary person responsible for growing the number of Visual Studio users who use Azure. He needed help, since this was a daunting task that was poorly understood by most people, and required significant time learning all kinds of things. What Azure services make sense for people building new apps? What about existing apps? What do people struggle with the most? Is our documentation and guidance matching what developers try to do? Is everything up to date? Are we even exploring at the right thing? Are we measuring the right actions via telemetry? What new things are teams in the Azure org cooking up, and should we focus on those things? What do MVPs say? What do existing Azure users say? What do AWS users say? What does this new AWS service do and is it compelling to our customer base? Why or why not? Etc.</p>
<p>The details of this stuff are kind of boring, and frankly, not my cup of tea. But I learned a whole lot about what people struggle with and how we measure things. I had to write out a report every other week about what we learned, measured, etc. We were consistently under our growth targets and/or within the margin of error for measurement at the time, which I view as a success largely because we tried really hard to make sure we were measuring things as accurately as possible. My boss later convinced the management folks in the organization that we were focused on the wrong things, and my understanding is that there is now a far greater alignment between how our division measures that cohort of developers and how the Azure division does.</p>
<p>Something that stood out to me about this is that at no point did our management poke and prod and try to push us to “make number go up”. They wanted to read our hypotheses we developed, what we tried, what we learned, and what our new hypotheses to test were going to be. They understood just as well as we did that this was an extremely complicated and difficult space, and so the focus was on learning things and sharing what we learned with others instead of being &ldquo;right&rdquo; and &ldquo;growing&rdquo;. This has been a consistent theme with my management throughout my career at Microsoft: prioritizing people learning and trusting them to do good work with what they learned. I may not have enjoyed this project at the time, but the environment it existed in was one that helped me grow and I&rsquo;m happy about that.</p>
<p>In the Fall of 2017, I also helped move along a proposal to move the <a class="gblog-post__link" href="https://www.nuget.org/packages/FSharp.Core/">F# Core Library</a>
 package on NuGet to be built and published from the Microsoft development repository. It was a package built and packaged by the F# community to support cross-platform development before .NET Core, but also to integrate more cleanly with F# projects than referencing an assembly placed on a machine by Visual Studio.</p>
<p>A brief history lesson: Microsoft has traditionally &ldquo;seen&rdquo; F# as &ldquo;Visual F#&quot;; that is, a language and tooling that is incorporated into Visual Studio. The F# community has always treated F# as something more than that. This manifested itself in very real ways in the past, including with how the F# Core Library was distributed. Microsoft would build and distribute a binary via Visual Studio to build F# applications within Visual Studio that would run on Windows. This was fine in 2010 when the first F# release in Visual Studio happened, but in 2017 this was not acceptable anymore. F# was transitioning to be &ldquo;not only Visual Studio&rdquo; and ultimately become cross-platform, <a class="gblog-post__link" href="https://phillipcarter.dev/posts/aka.ms/fsharphome">open source functional language for .NET</a>
. A necessary step on this path was to consistently build and deploy the F# Core Library for all scenarios.</p>
<p>This was an extremely difficult task firstly because it ultimately meant the F# community had to give up some control they had back to Microsoft. Everyone involved was kind and agreeable, but it took some time. Secondly, we had to make massive changes to our build infrastructure and Visual Studio tooling to make all things FSharp.Core center around deploying as a NuGet package. We messed things up a few times and had to unlist some bad package versions. The system is still not perfect today, but it&rsquo;s stable and things mostly make sense.</p>
<p>That fall, I was invited to speak at <a class="gblog-post__link" href="https://www.openfsharp.org/">Open F#</a>
, an incredible community-run conference that I prioritize attending every year. I had an absolute blast, made new friends, was honored to be named a <a class="gblog-post__link" href="https://c4fsharp.net/heroes.html">&ldquo;Community Hero&rdquo;</a>
. One thing I definitely won&rsquo;t forget is staying up until 3am talking F#, community, and life with <a class="gblog-post__link" href="https://twitter.com/rickasaurus">Rick Minerich</a>
 in <a class="gblog-post__link" href="https://twitter.com/brandewinder">Mathias Brandewinder&rsquo;s</a>
 kitchen. We both had to leave, so we accidentaly walked into the room where <a class="gblog-post__link" href="https://twitter.com/selketjah">Gien Versatche</a>
 was sleeping and she was pretty mad at us for waking her up (she was an organizer of the conference and deserved to rest without interruption). We apologized profusely and got into an Uber before parting ways until next year when Rick was kind enough to host me for his meetup in New York.</p>
<p>In the fall, the F# team also got a new hire, Will Smith. He&rsquo;s a friend of mine and one of the most incredible F# programmers I&rsquo;ve ever met. With his help, we were finally able to make F# tooling support in Visual Studio when using .NET Core to be at part with non-.NET Core.</p>
<p>Near the end of 2017 is when I finally felt like I belonged in the role I was in. A lot of this was maturing and growing professionally. But I think most of it was so many people in the F# community choosing to welcome me as a part of their community and place trust in me to do right by them with the language and tools. Had it not been for them, I&rsquo;m positive that I would have ultimately changed roles or left Microsoft if a company waved enough money in my face. Conversely, one of the major reasons why I&rsquo;m not tempted by recruiters at Facebook or Amazon or whatever is that I&rsquo;d have to give up one of the most personal and meaningful aspects of my job.</p>
<p>The beginning of 2018 was unremarkable. We were able to deliver proper support for .NET Core projects using F# in Visual Studio, and there was still a flood of OSS contributions to keep on top of. More features, but this time of the &ldquo;polish this up&rdquo; variety, more bug fixes, and more infrastructure improvements. We began planning out what the next F# language version would be, and we ultimately landed on F# 4.5 because we wanted to unify a <a class="gblog-post__link" href="https://github.com/fsharp/fslang-design/blob/master/tooling/FST-1004-versioning-plan.md">hilariously confusing versioning system</a>
 that F# had developed over the years. That meant jumping from F# 4.1 to F# 4.5. Oh well!</p>
<p>I got to attend F# eXchange again, but this time I left home for 2 weeks. I gave a talk with my manager at a Microsoft conference in Orlando, then flew up to New York City to meet some customers and speak at a meetup. I then flew to Dublin, Ireland to meet more customers and take notes on what things could be improved with the F# language and tools. Dublin is a pretty cool city. I then spent a week in London and met with old friends, made some new ones, cavorted around town a lot, and had an amazing time at the F# eXchange conference.</p>
<p>Near the end of my third year at Microsoft, I finished my &ldquo;help grow Visual Studio Azure users&rdquo; duties. F# 4.5 was in full swing heading into the Summer, and I was able to spend a lot of time learning about how the F# compiler works (at least some parts of it) in the final weeks of my third year at Microsoft. It was a good time.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="fourth-year---2018-2019---owning-initiatives">
        Fourth year - 2018-2019 - owning initiatives
        <a data-clipboard-text="https://phillipcarter.dev/posts/five-years-at-microsoft/#fourth-year---2018-2019---owning-initiatives" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Fourth year - 2018-2019 - owning initiatives" href="#fourth-year---2018-2019---owning-initiatives">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>The beginning of my fourth year was dominated by shipping F# 4.5. We had recently merged a feature to enable proper use of the <code>Span&lt;'T&gt;</code> type, a new primitive in .NET Core that would serve as the foundational type that all kinds of buffers (arrays, strings, etc.) could be treated as. Because it is a foundational type instead of just some addition to the .NET core libraries, it was critical for F# to deeply understand this data type and doing so meant a lot of compiler analysis to ensure that the code you write doesn&rsquo;t allocate on the managed heap.</p>
<p>We (mostly me) faced some criticism from some F# users for focusing on this, largely because it came at the expense of features that they wanted for everyday F# programming, like Anonymous Records. And for anyone using .NET Framework, none of this work would be useful to them because the <code>Span&lt;'T&gt;</code> type and its associated runtime enhancements are not on .NET Framework. I struggled a lot to express that F# was effectively &ldquo;replatforming&rdquo; with .NET Core as its foundational base for doing things, and this was necessary for that. This necessarily came at the expense of people who have no need or desire for .NET Core; or rather, it meant that their world was effectively frozen. Sure, they&rsquo;d get new features that could work for them over time, but all the energy being poured into F# was (and still is) centered around .NET Core.</p>
<p>In mid-Summer, we shipped F# 4.5 with more ways to write high-performance, low-allocation F# code alongside a handful of other nice features. We even had a community member implement a feature end-to-end, from suggestion to design to implementation. Overall, it was a good release with few problems - a stark contrast to F# 4.1 and the first of a series of releases (F# 4.5, F# 4.6, F# 4.7) where we shipped good stuff people mostly liked and we didn&rsquo;t have a bad time dealing with bugs that came afterwards.</p>
<p>In the fall, I was given a new assignment. Throughout Visual Studio 2017, various teams had tried - and sometimes failed - to improve the time it takes to load a codebase before you can start writing code. In fact, an entirely new way of working with VS called Lightweight Solution Load was first shipped in VS 2017 update 15.0, and then removed from the product in VS 2017 update 15.5. It correctly identified that developers don&rsquo;t want to load absolutely everything all at once before touching a single file, but the approach taken was ultimately too complex from a user experience standpoint. But that didn&rsquo;t mean we were going to abandon the idea that load times needed improvement, and I was tasked with being an &ldquo;owner&rdquo; for .NET tooling in the renewed initiative to figure things out.</p>
<p>At the same time, there was a big push to improve the memory usage of F# tooling for larger codebases, especially based on feedback from industrial users. The F# compiler and language service has had some very serious, latent issues that were now getting uncovered as the F# developer base grew and codebases expanded in size. The performance characteristics were fine for most users in 2015, but it wouldn&rsquo;t cut it in 2018. The work to improve F# tooling for large codebases is still ongoing, and there are still some ways you can make Visual Studio break down from the sheer weight of memory allocations with F#. But we fixed a lot of these issues in the Fall and Winter of 2018, which I&rsquo;m proud of.</p>
<p>When not doing F#, I spent a lot of my time running user studies where I essentially tortured people with an intentionally broken Visual Studio to explore user behaviors when things were still being initialized. I learned a lot and helped contribute to a deeper understanding of user behaviors when they&rsquo;re first starting to code for the day. I then wrote a document detailing an experience for Visual Studio when things were still being initialized in the background, much of which now exists in Visual Studio today. That said, my heart wasn&rsquo;t 100% in that proposal. I believed in aggressive caching of data and lettings users work with &ldquo;stale&rdquo; information from a cache until background work is done and data is up to date, without notifying people in the UI. Unfortunately, I didn&rsquo;t put together an alternative proposal and associated work to show that it would be a better approach, so it was ultimately just another opinion.</p>
<p>One thing I found myself running up against at this stage in my career was a cultural difference across teams. On the .NET team, we try to be &ldquo;agile&rdquo;: process is usually minimized, and we like to try things and then react to change. And within the PM subset of the .NET group there is variance from PM to PM, but I would say that we generally tend to prioritize using the product we work on daily, especially those of us who work on tooling. There is a culture of having a deep understanding of how users use what you work on, and one of the best tools for developing that understanding is to use the product yourself. Additionally, it&rsquo;s often a virtue to know how what you work on operates under the covers, at least to a reasonable degree. This last part is often necessary because many things users want are <strong>inherently technical</strong> and you cannot make a good decision on something unless you understand it at least as deeply as the user does. Very often a request will come in that has implications for use cases that the user did not account for in their request. It&rsquo;s the responsibility of a PM on the .NET team, ultimately, to have the context to understand what implementing a request would imply for other scenarios or other parts of the product they&rsquo;re working on. That understanding doesn&rsquo;t have to originate from the PM, but it&rsquo;s the PM&rsquo;s responsibility to develop that understanding (however works best for them) and communicate with their users and peers. This kind of deep knowledge takes a long time to develop, so we encourage people to stick around for a while. I&rsquo;ve found that I thrive in this environment.</p>
<p>This culture is not uniform for every team and individual across the division I work in, and I ran headfirst into that on this project. I very strongly empathized with individual users because I used the product daily and understand how it works under the covers (to the degree necessary to make decisions about it), but this was not viewed as valuable or relevant to the work I was assigned to. Instead, user studies and related things (typically survey results) are what mattered most, and the lack of these things would be used as a tool to prevent any work from being done on something. I thrive in minimal process environments where we react to feedback and don&rsquo;t thrive so much in more process-heavy environments. I can understand its value and have come to appreciate user studies, surveys, and customer calls as effective tools in my toolbelt. I use these as tools myself, but not to the degree that other teams do or expect them to be used. This was ultimately the root of my frustration at the time.</p>
<p>Collaboration was respectful and ultimately fruitful, but it was also challenging and frustrating for me. But at the end of the day, engineers put in a lot of hard work and the product improved in time for a very excellent Visual Studio 2019 release (and excellent subsequent releases). I still believe we could have had an even better short-term and long-term outcome had we taken a different technical route, but &ldquo;our good release could have been better&rdquo; is not a hill worth dying on, and making a stink about that would only serve to diminish the work other people had done.</p>
<p>That fall, I got to attend Open F# again and it was an incredible time. I have decided that it&rsquo;s my favorite conference to attend. The whole thing is community-organized, and the organizers are my friends. They care about every single little detail, especially about the &ldquo;feel&rdquo; of the event being community-focused, and it really shows. I got to spend more time with my friends in the F# community and that continued to validate that my job was the right one for me.</p>
<p>The F# 4.6 release for VS 2019 also went well. We shipped with a pretty egregious bug where defining an anonymous record would break all ability to debug your program, though. It&rsquo;s really embarrassing that this one slipped through. But overall, performance was improved so much that many users completely abandoned VS 2017 because VS 2019 was so much better for them. We worked towards another successful VS 2019 update 16.1 release with more performance improvements and fixed a few bugs along the way.</p>
<p>In 2019, I decided to branch out a bit with my conferences and submitted talks to LambdaConf and Compose Conference. They are functional programming-focused conferences that have traditionally had little or no F# presence (at least in recent years), so it was kind of scary to be going into spaces where I was mostly on my own. In addition to that, some of the folks speaking at these conferences are some of the smartest and most talented functional programmers in the US. I rolled into Boulder, Colorado completely intimidated but ended up having a great time, learned a lot, and made some friends along the way. Soon after LambdaConf, I few over to NYC to talk with some customers and speak at Compose Conference, where I also had a great time with some of the excellent folks in the NYC functional programming scene.</p>
<p>In the middle of the NYC trip, I was pinged on Slack by Don Syme to look over an &ldquo;AI language strategy&rdquo; set of documents that loosely laid out various things he had been working on to better define what we could do to impact Machine Learning from the perspective of languages. The general premise was that Python is not great at expressing what people in this space care about, and although it has excellent libraries and frameworks, they force a &ldquo;everything must be a tensor&rdquo; view of their world on any problem people solve with no regards to if that&rsquo;s actually the appropriate way to model the problem. There is also the problem that it isn&rsquo;t really Python being used to execute models but practically another language with its own semantics grafted onto Python via a framework (Tensorflow and Torch are examples). I lacked (and still lack) deep understanding of this space, but it all smelled like &ldquo;this is an immature subfield of software engineering&rdquo; to me which was exciting. I spent some time working with Don and others to identify things we could materially do in F# to improve using F# for interactive and &ldquo;analytical&rdquo; workloads near the end of this fourth year.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="fifth-year---2019-2020---becoming-senior">
        Fifth year - 2019-2020 - becoming senior
        <a data-clipboard-text="https://phillipcarter.dev/posts/five-years-at-microsoft/#fifth-year---2019-2020---becoming-senior" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Fifth year - 2019-2020 - becoming senior" href="#fifth-year---2019-2020---becoming-senior">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>I started off my fifth year without a direct manager, instead reporting directly to my director. This is somewhat common at Microsoft when managers leave, and at this point in my career I understood that and didn&rsquo;t think much of it. I&rsquo;ve always had a high degree of autonomy so far in my career, but it felt like that was dialed up even more which was pretty great. I spent some time in various meetings discussing various strategies for addressing language-related gaps for machine learning and that was pretty neat. The fact that I was treated as an expert in this space is still kind of wild to me, but I guess it&rsquo;s hard to find people who have spent years working on programming languages anyways.</p>
<p>Leadership at Microsoft has been burned in the past on grand, multi-year strategies that fell apart because those strategies (shocker) didn&rsquo;t predict the future and were incredibly expensive. So, the task at this point was to define incremental things we could do in languages and tooling to make today&rsquo;s machine learning tasks (and everything that surrounds ML) better. More long-term goals were also defined, but we were careful to think about them in a way that was loose and able to change based on how the world changed, rather than follow some rigid path beautifully laid out with millions of assumptions about how the world would operate in a few years. I really liked this work and it took up the bulk of my energy that Summer. Much of what we planned has become concrete in F# 5 and the <a class="gblog-post__link" href="https://github.com/dotnet/interactive/">.NET Interactive</a>
 initiative that brings F# and C# to Jupyter Notebooks and VSCode Notebooks.</p>
<p>Heading into the fall, we worked on F# 4.7 and introduced the ability to add preview features to the language. This has been critical work for us to release F# 5 features early and will likely serve us well for all future F# releases. F# 4.7 wasn&rsquo;t that big of a deal from a languag evolution standpoint but it contained some nice improvements like Implicit Yields that people like.</p>
<p>At the same time, I was tasked with developing a tool that could convert a .NET Framework project into a .NET Core project. Conversion tooling has long been a touchy subject for a lot of folks, so it was steeped in politics, but my director gave me air cover to just work on it, so I built the initial version of <a class="gblog-post__link" href="https://github.com/dotnet/try-convert">try-convert</a>
 and have been a co-maintainer of the tool ever since. The result spooked some people and that was stressful. One of the problems with working at Microsoft is we have incredibly smart people who are, in a way, damaged by having to support halfway-broken things that weren&rsquo;t thought out completely. The don&rsquo;t react well to seeing new things built by someone else that encroach upon &ldquo;their space&rdquo; in large part because historically, they have been asked to maintain half-baked things other people built and subsequently abandoned. Additionally, conversion tooling for .NET is something multiple engineers have wanted to do before, but they were told at a different time by a different management chain that they weren&rsquo;t allowed to do it. I was apparently lucky to be able build <a class="gblog-post__link" href="https://github.com/dotnet/try-convert">try-convert</a>
, and after speaking to some people it ended up being fine. Customers liked it and it&rsquo;s been used by a lot of people to help converting to .NET Core, so I&rsquo;m happy about it and continue to maintain the tool today.</p>
<p>That September, I was given a great review by my management and told that I was on the path to becoming Senior. This was wild to me, because I still felt like a junior PM. There are a lot of people on the .NET team with much more experience and knowledge than me, and the thought that I would start to be considered a peer to them rather than some junior who&rsquo;s still learning how to do stuff was kind of a shock. I was happy, but also had a lot of imposter syndrome. I still have that feeling, and I know that it&rsquo;s not rational to compare myself to people who literally have a decade or more experience than I do, but it still happens.</p>
<p>Also that September, I got to attend Open F# again and once more had an incredible time. There were some spooky circumstances involved with a former F# community member who had threatened the lives of some F# users over email, so I had to speak with security people and spend time with other members of the F# Software Foundation board to help organize paid security for the event given that at least one of the victims was attending. Happily, nothing happened, and the security guards were very bored. I made some new friends again, ate incredible food, and got more drunk than I&rsquo;ve ever been before with a friend from college. I think I&rsquo;ve had like one beer since that time and the idea of alcohol still isn&rsquo;t appealing to me.</p>
<p>The following Winter was kind of a blur and not notable in terms of any big projects I was working on. I spent a lot of time contributing to the F# codebase and learning more about how some of the internals of the compiler worked, which was great.</p>
<p>In the Spring of 2020, I was promoted to Senior. This still feels kind of surreal to me, but it also then hit me that every single junior PM I&rsquo;d interact with would consider me a Senior PM. I remember what I thought of Senior (and higher ranked) PMs when I was fresh out of college, so I promised myself that I would work to try and not intimidate junior PMs I worked with. One thing I try to do now is ask &ldquo;dumb&rdquo; questions about things &ldquo;every PM should know&rdquo; in large, public email aliases that I know junior PMs will see. It doesn&rsquo;t happen often, but if I have the opportunity to ask a question on a broader email alias I try to do that rather than just ask specific people. I want people who are new (or new-ish) to understand that just because they don&rsquo;t know something doesn&rsquo;t mean they are stupid, and there are lots of people at Microsoft who also don&rsquo;t know certain things. I don&rsquo;t know if this is the best possible approach, but I know it&rsquo;s something that would have made me feel better when I was junior. This is something I&rsquo;m seeing as a new phase in my career: how to &ldquo;act senior&rdquo; but also make it so that junior PMs can feel less self conscious about their lack of experience.</p>
<p>One thing I&rsquo;ve cared about for a long time is the .NET (and F#) development experience in Visual Studio Code. VSCode is my favorite editor, but it has a subpar .NET experience. There are very deep technical reasons for this, but what it all boils down to is that Visual Studio has critical infrastructural components (often called a &ldquo;project system&rdquo;) that are extremely robust, but stuck inside of devenv.exe today for both technical and nontechnical reasons. Neither the C# nor F# plugin has a system that is even remotely as robust, and this unfortunately affects nearly everything you can do with a C# or F# codebase. Small codebases work fine, but once you start incorporating many different dependencies and your codebase grows into distinct layers/components, management of these assets can get cumbersome and/or just fall over when you&rsquo;re not in Visual Studio. This is not the fault of the OmniSharp nor Ionide plugins; it&rsquo;s just that they&rsquo;re missing years and years of engineering time spent in this space that Visual Studio has.</p>
<p>This spring, I was tasked with writing up a proposal to identify how to make the .NET experience in VSCode better in light of VSCode being a primary editor with the Visual Studio Codespaces initiative. Additionally, we&rsquo;ve seen at various times that people who aren&rsquo;t long-time .NET and Microsoft customers gravitate towards VSCode first, and it would only make sense for .NET to have a good experience there if .NET is to attract new users. I spent a long time doing &ldquo;Customer Development&rdquo; to identify who was already using VSCode compared to VS, what they were doing, what they wanted to do, what they struggled with or found unsatisfying, and what they felt was missing. I also kicked off an ongoing triage session with other developers to classify numerous issues filed on the C# extensions so that we could get a better technical understanding of the problems the plugin faces today.</p>
<p>Leading right up to the end of my fifth year, I lead a discussion around a long proposal I wrote about making .NET better for VSCode with various directors. It was a successful proposal that they all accepted, which meant we could start getting tactical about how to see it through. It was ambitious but also incremental, which I&rsquo;ve learned over the years is often a path to success. I don&rsquo;t know at all how this will ultimately pan out since it is in such early stages, but I&rsquo;m excited for the challenge and I hope to make VSCode great for .NET users, continue to move more things into the open source space, and build pluggable components that community members can use.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="the-next-five-years">
        The next five years
        <a data-clipboard-text="https://phillipcarter.dev/posts/five-years-at-microsoft/#the-next-five-years" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor The next five years" href="#the-next-five-years">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>I&rsquo;ve had a great time at Microsoft. I made so many friends and have learned so many things I could not have possibly anticipated. I&rsquo;m looking forward to the next five years of learning more things and making new friends. I don’t have much of an idea of what the next 5 years will be like, but I hope it involves a lot of the kinds of things that made the previous 5 years so great.</p>
]]></content><category scheme="https://phillipcarter.dev/tags/fsharp" term="fsharp" label="fsharp"/><category scheme="https://phillipcarter.dev/tags/microsoft" term="microsoft" label="Microsoft"/></entry><entry><title type="html">How to use F# and BenchmarkDotNet</title><link href="https://phillipcarter.dev/posts/benchmarking-fsharp/?utm_source=atom_feed" rel="alternate" type="text/html" hreflang="en"/><id>https://phillipcarter.dev/posts/benchmarking-fsharp/</id><published>2020-06-25T00:00:00+00:00</published><updated>2021-02-28T16:22:54-08:00</updated><content type="html"><![CDATA[<p>Every once in a while, you&rsquo;ll want to compare to performance of two or more routines, algorithms, types, etc. This is called <a class="gblog-post__link" href="https://en.wikipedia.org/wiki/Benchmarking">benchmarking</a>
 and it&rsquo;s a lot of fun to do in F#. Here&rsquo;s how you do it.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="how-to-install-benchmarkdotnet">
        How to install BenchmarkDotNet
        <a data-clipboard-text="https://phillipcarter.dev/posts/benchmarking-fsharp/#how-to-install-benchmarkdotnet" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor How to install BenchmarkDotNet" href="#how-to-install-benchmarkdotnet">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>First, make sure you&rsquo;ve got the latest <a class="gblog-post__link" href="https://dotnet.microsoft.com/download">.NET SDK</a>
. Then create a new console app:</p>
<pre><code class="language-console" data-lang="console">dotnet new console -lang F# -o BasicExperiment
</code></pre><p>Navigate to the <code>BasicExperiment</code> directory and add the package:</p>
<pre><code class="language-console" data-lang="console">dotnet add package benchmarkdotnet
</code></pre><p>Now you can write code!</p>



<div class="gblog-post__anchorwrap">
    <h2 id="simple-benchmarkdotnet-example">
        Simple BenchmarkDotNet example
        <a data-clipboard-text="https://phillipcarter.dev/posts/benchmarking-fsharp/#simple-benchmarkdotnet-example" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Simple BenchmarkDotNet example" href="#simple-benchmarkdotnet-example">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>Here&rsquo;s a simple benchmark comparing a naiive implementation for <code>List.length</code> to the built-in one on a list of 1 million integers.</p>
<div class="highlight"><pre class="chroma"><code class="language-fsharp" data-lang="fsharp"><span class="c1">// Learn more about F# at http://docs.microsoft.com/dotnet/fsharp
</span><span class="c1"></span>
<span class="k">open</span> <span class="nn">BenchmarkDotNet.Attributes</span>
<span class="k">open</span> <span class="nn">BenchmarkDotNet.Running</span>

<span class="k">module</span> <span class="nn">List</span> <span class="o">=</span>
    <span class="k">let</span> <span class="nv">inline</span> <span class="n">myLength</span> <span class="n">xs</span> <span class="o">=</span>
        <span class="k">let</span> <span class="nv">rec</span> <span class="n">loop</span> <span class="n">xs</span> <span class="n">acc</span> <span class="o">=</span>
            <span class="k">match</span> <span class="n">xs</span> <span class="k">with</span>
            <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="n">acc</span>
            <span class="o">|</span> <span class="o">_</span> <span class="o">::</span> <span class="n">tail</span> <span class="o">-&gt;</span>
                <span class="n">loop</span> <span class="n">tail</span> <span class="o">(</span><span class="n">acc</span> <span class="o">+</span> <span class="n">1</span><span class="o">)</span>
        <span class="n">loop</span> <span class="n">xs</span> <span class="n">0</span>

<span class="o">[&lt;</span><span class="n">MemoryDiagnoser</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">LengthBench</span><span class="bp">()</span> <span class="o">=</span>
    <span class="k">let</span> <span class="nv">lst</span> <span class="o">=</span> <span class="o">[</span> <span class="n">1</span><span class="o">..</span><span class="n">1_000_000</span> <span class="o">]</span>

    <span class="o">[&lt;</span><span class="n">Benchmark</span><span class="o">(</span><span class="n">Baseline</span><span class="o">=</span><span class="k">true</span><span class="o">)&gt;]</span>
    <span class="k">member</span> <span class="n">_</span><span class="p">.</span><span class="nf">BuiltIn</span><span class="bp">()</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">length</span> <span class="n">lst</span>

    <span class="o">[&lt;</span><span class="n">Benchmark</span><span class="o">&gt;]</span>
    <span class="k">member</span> <span class="n">_</span><span class="p">.</span><span class="nf">Custom</span><span class="bp">()</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">myLength</span> <span class="n">lst</span>

<span class="o">[&lt;</span><span class="n">EntryPoint</span><span class="o">&gt;]</span>
<span class="k">let</span> <span class="nv">main</span> <span class="n">argv</span> <span class="o">=</span>
    <span class="nn">BenchmarkRunner</span><span class="p">.</span><span class="n">Run</span><span class="o">&lt;</span><span class="n">LengthBench</span><span class="o">&gt;</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
    <span class="n">0</span> <span class="c1">// return an integer exit code
</span></code></pre></div><p>The results looked like this when I ran it:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th style="text-align:right">Mean</th>
<th style="text-align:right">Error</th>
<th style="text-align:right">StdDev</th>
<th style="text-align:right">Ratio</th>
<th style="text-align:right">RatioSD</th>
<th style="text-align:right">Gen 0</th>
<th style="text-align:right">Gen 1</th>
<th style="text-align:right">Gen 2</th>
<th style="text-align:right">Allocated</th>
</tr>
</thead>
<tbody>
<tr>
<td>BuiltIn</td>
<td style="text-align:right">2.857 ms</td>
<td style="text-align:right">0.0562 ms</td>
<td style="text-align:right">0.0788 ms</td>
<td style="text-align:right">1.00</td>
<td style="text-align:right">0.00</td>
<td style="text-align:right">-</td>
<td style="text-align:right">-</td>
<td style="text-align:right">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Custom</td>
<td style="text-align:right">3.077 ms</td>
<td style="text-align:right">0.0608 ms</td>
<td style="text-align:right">0.1127 ms</td>
<td style="text-align:right">1.09</td>
<td style="text-align:right">0.05</td>
<td style="text-align:right">-</td>
<td style="text-align:right">-</td>
<td style="text-align:right">-</td>
<td style="text-align:right">-</td>
</tr>
</tbody>
</table>
<p>So it looks like my routine is in the same ballpark. Cool!</p>
<p>There are three important things here aside from the structure of the code:</p>
<ol>
<li>The <code>Benchmark</code> attribute, which tells BenchmarkDotNet which methods are benchmarks</li>
<li>The <code>Baseline</code> property, which establishes the baseline results to compare against (in this case, the built-in <code>List.length</code> function)</li>
<li>The <code>Baseline</code> property, which establishes the baseline results to compare against (in this case, the built-in <code>List.length</code> function)</li>
<li>The <code>MemoryDiagnoser</code> attribute, which measures allocations for a given benchmark.</li>
</ol>
<p>The fourth is particularly important for routines that aren&rsquo;t 100% CPU operations like computing the length of a list. You may find yourself in a situation where one routine is a little faster but allocates more memory. In some situations, less allocations might matter more than a few milliseconds of execution time, for example.</p>
<p>I personally prefer to cleanly separate out the routine I&rsquo;m testing from the benchmark code. For larger pieces of code, I may move the implementation into a separate file.</p>
<p>Another consideration is looking into some of the Benchmark.NET APIs for setup and teardown. Some benchmarks have complicated initialization requirements that the sample doesn&rsquo;t cover. But before you go reaching for more machinery to help you test things, I&rsquo;d recommend seeing what you can change so that you can stick with something simple and straightforward.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="what-to-look-for-in-the-results">
        What to look for in the results
        <a data-clipboard-text="https://phillipcarter.dev/posts/benchmarking-fsharp/#what-to-look-for-in-the-results" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What to look for in the results" href="#what-to-look-for-in-the-results">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>The first thing to look for is pretty obvious: which benchmark has the faster execution time? The mean is usually good enough, but you should also check the standard deviation to see how much variance there is. Two algorithms could show similar mean execution times, but one may have a smaller standard deviation which could imply more consistent execution time.</p>
<p>The second thing to look for is initially straightforward: which benchmark allocates more memory? At least in .NET, the less memory you allocate, the better (usually). But this can then complicate matters. If one algorithm is 2x faster but allocates 2x as much memory, is it better? What about the inverse? The answers to these questions will depend on circumstances specific to your application. For example, is memory an issue because you have a long-running process where you&rsquo;d like as little GC as possible? Or does it not matter because you have a process that just runs once and will likely never run out of memory?</p>



<div class="gblog-post__anchorwrap">
    <h2 id="dont-bother-trying-to-outsmart-benchmarkdotnet">
        Don&rsquo;t bother trying to outsmart BenchmarkDotNet
        <a data-clipboard-text="https://phillipcarter.dev/posts/benchmarking-fsharp/#dont-bother-trying-to-outsmart-benchmarkdotnet" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Don&rsquo;t bother trying to outsmart BenchmarkDotNet" href="#dont-bother-trying-to-outsmart-benchmarkdotnet">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>You might notice some variance in overall results if you run the benchmarking program multiple times, where one algorithm goes back and forth between running marginally faster or slower than the other. This doesn&rsquo;t really mean much other than that the 2 (or more) routines are basically the same from a performance perspective.</p>
<p>You may be tempted to do something like run an algorithm many times for each benchmark just to &ldquo;really be sure&rdquo; it&rsquo;s being tested correctly. This is a waste of time, since BenchmarkDotNet will run each benchmark enough times so that it has statistically significant results. Additionally, artifically calling an algorithm many times just to &ldquo;really be sure&rdquo; about it means that you&rsquo;re not actually testing that algorithm anymore.</p>



<div class="gblog-post__anchorwrap">
    <h2 id="performance-work-is-hard">
        Performance work is hard
        <a data-clipboard-text="https://phillipcarter.dev/posts/benchmarking-fsharp/#performance-work-is-hard" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Performance work is hard" href="#performance-work-is-hard">
            <svg class="icon link"><use xlink:href="#link"></use></svg>
        </a>
    </h2>
</div>

<p>Lastly, don&rsquo;t let the simplicity of a great tool like BenchmarkDotNet fool you into thinking that performance work is easy. Yes, if you can benchmark an algorithm and show that it is significantly faster than another one, you should probably just use the faster algorithm. But this kind of experimentation barely scratches the surface of what performance work (at least for F# and .NET applications) can actually entail. If you&rsquo;re interested in how deep it can go, there are some <a class="gblog-post__link" href="https://www.amazon.com/s?k=.NET&#43;performance&amp;ref=nb_sb_noss_2">great books on Amazon</a>
 covering the topic.</p>
]]></content><category scheme="https://phillipcarter.dev/tags/fsharp" term="fsharp" label="fsharp"/></entry></feed>